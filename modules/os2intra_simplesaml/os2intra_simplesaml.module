
<?php

/**
 * @file
 * Code for os2intra_simplesaml.
 */

/**
 * Implements hook_menu().
 */
function os2intra_simplesaml_menu() {
  $items = array();

  $items['admin/config/os2intra'] = array(
    'title' => 'OS2Intra Setup',
    'description' => 'Manage OSIntra settings',
    'position' => 'right',
    'weight' => -15,
    'access arguments' => array('administer os2intra'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/os2intra/simplesaml'] = array(
    'title' => 'OS2Intra SimpleSAML',
    'description' => 'Administer SimpleSAML',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2intra_simplesaml_settings_form'),
    'access arguments' => array('administer os2intra simplesaml'),
  );
  $items['os2intra/simplesaml/logout'] = array(
    'title' => 'NemID logout',
    'description' => 'NemID logout callback',
    'page callback' => 'os2intra_simplesaml_logout_method',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_monolog_channel_info().
 */
function os2intra_simplesaml_monolog_channel_info() {
  $channels = array();

  $my_module_name = basename(__FILE__, '.module');
  $channels[$my_module_name] = array(
    'label' => $my_module_name,
    'description' => t('The default channel that os2logging messages are routed through.'),
    'default profile' => '$my_module_name',
  );

  return $channels;
}

/**
 * Form callback for settings.
 */
function os2intra_simplesaml_settings_form($form, &$form_state) {
  $form['os2intra_simplesaml_simplesaml_enable'] = array(
    '#title' => t('Enabled SimpleSAML redirect'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('os2intra_simplesaml_simplesaml_enable'),
  );

  $form['os2intra_simplesaml_redirected_ips'] = array(
    '#title' => t("Redirect IP's to SimpleSAML login"),
    '#type' => 'textfield',
    '#description' => t('Comma separated. Ex. 192.168.1.1,192.168.2.1'),
    '#default_value' => variable_get('os2intra_simplesaml_redirected_ips'),
  );
  $form['os2intra_simplesaml_nemid_login'] = array(
    '#type' => 'fieldset',
    '#title' => t('NemID login'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['os2intra_simplesaml_nemid_login']['os2intra_simplesaml_nemid_login_pid_attr'] = array(
    '#title' => t("Which attribute from simpleSAMLphp should be used as user's PID"),
    '#type' => 'textfield',
    '#default_value' => variable_get('os2intra_simplesaml_nemid_login_pid_attr'),
  );
  $form['os2intra_simplesaml_nemid_login']['os2intra_simplesaml_nemid_login_rid_attr'] = array(
    '#title' => t("Which attribute from simpleSAMLphp should be used as user's RID"),
    '#type' => 'textfield',
    '#default_value' => variable_get('os2intra_simplesaml_nemid_login_rid_attr'),
  );
  $form['os2intra_simplesaml_nemid_login']['os2intra_simplesaml_nemid_login_error_message'] = array(
    '#title' => t("NemID error message"),
    '#type' => 'textfield',
    '#description' => t('NemID error message, when user does not exist'),
    '#default_value' => variable_get('os2intra_simplesaml_nemid_login_error_message'),
  );
  $form['os2intra_simplesaml_tfa_skip'] = array(
    '#title' => t('Enable TFA skip'),
    '#type' => 'checkbox',
    '#description' => t('Upon logging in with Nemlogin, if there is a user with the same "nemlogin_uid" mapped in database, this user is logged in to Drupal automatically skipping TFA.'),
    '#default_value' => variable_get('os2intra_simplesaml_tfa_skip'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_validate().
 */
function os2intra_simplesaml_settings_form_validate($form, &$form_state) {
  if (preg_match("/[^0-9.,]/", $form_state['values']['os2intra_simplesaml_redirected_ips'])) {
    form_set_error('os2intra_simplesaml_redirected_ips', 'Invalid format');
  }
}

/**
 * Implements hook_user_login().
 *
 * Updates the user's LOOP account details.
 */
function os2intra_simplesaml_user_login(&$edit, $account) {
  if (isset($_SESSION['nemlogin_uid'])) {
    $nemlogin_uid = $_SESSION['nemlogin_uid'];

    watchdog('os2intra_simplesaml', 'Attemping to login with Nemlogin uid (%nemlogin_uid) started for user %login (uid: %uid).', array(
      '%nemlogin_uid' => $nemlogin_uid,
      '%login' => $account->name,
      '%uid' => $account->uid,
    ));

    // Check if account has nemlogin_uid stored in system.
    $stored_nemlogin_uid = db_select("os2intra_simplesaml_nemid_pid_mapping", "os2pid")
      ->fields("os2pid", array("nemlogin_uid"))
      ->condition("uid", $account->uid)
      ->execute()
      ->fetchField();

    if (!empty($stored_nemlogin_uid)) {
      // If yes - is the nemlogin_uid the same?
      if (strcasecmp($stored_nemlogin_uid, $nemlogin_uid) != 0) {
        // NO = the nemlogin_uid in the system and $_SESSION do not match, prevent login.
        module_invoke_all('user_logout', $account);
        // Destroy the current session, and reset $user to the anonymous user.
        session_destroy();

        drupal_set_message(t("The user you are trying to login with is already associated with different Nemlogin UID"), 'warning');
        watchdog('user', 'Session closed for %name.', array('%name' => $account->name));

        watchdog('os2intra_simplesaml', 'The nemlogin uid (%nemlogin_uid1) associated with this user %login (uid: %uid) does not match the nemlogin uid (%nemlogin_uid2) from request headers.', array(
          '%nemlogin_uid1' => $stored_nemlogin_uid,
          '%nemlogin_uid2' => $nemlogin_uid,
          '%login' => $account->name,
          '%uid' => $account->uid,
        ));
        watchdog('os2intra_simplesaml', 'Session closed for user %name (uid: %uid)', array(
          '%name' => $account->name,
          '%uid' => $account->uid,
        ));

        drupal_goto();
      }
    }
    else {
      // If no, store this nemlogin_uid for the user.
      $num_updated = db_update('os2intra_simplesaml_nemid_pid_mapping')
        ->fields(array(
          'nemlogin_uid' => $nemlogin_uid,
          'changed' => REQUEST_TIME,
        ))
        ->condition('uid', $account->uid)
        ->execute();

      // Not updated, new entry.
      if (!$num_updated) {
        db_insert('os2intra_simplesaml_nemid_pid_mapping')
          ->fields(array(
            'uid' => $account->uid,
            'nemlogin_uid' => $nemlogin_uid,
            'changed' => REQUEST_TIME,
          ))
          ->execute();
      }

      watchdog('os2intra_simplesaml', 'Mapping new nemlogin uid (%nemlogin_uid) with user %login (uid: %uid)', array(
        '%nemlogin_uid' => $nemlogin_uid,
        '%login' => $account->name,
        '%uid' => $account->uid,
      ));
    }

    watchdog('os2intra_simplesaml', 'User %login (uid: %uid) successfully logged in with nemloging uid (%nemlogin_uid).', array(
      '%nemlogin_uid' => $nemlogin_uid,
      '%login' => $account->name,
      '%uid' => $account->uid,
    ));
  }
}


/**
 * Implements hook_init().
 */
function os2intra_simplesaml_init() {
  global $user;
  global $_simplesamlphp_auth_as;
  global $_simplesamlphp_auth_saml_attributes;

  // Getting SAML attributes.
  if (_simplesamlphp_auth_isEnabled(TRUE) && $user->uid == 0) {
    // Get the simplesamlphp session.
    $basedir = variable_get('simplesamlphp_auth_installdir', '/var/simplesamlphp');
    require_once($basedir . '/lib/_autoload.php');
    // Load simpleSAMLphp metadata.
    $_simplesamlphp_auth_as = new SimpleSAML_Auth_Simple(variable_get('simplesamlphp_auth_authsource', 'default-sp'));
    $_simplesamlphp_auth_saml_attributes = $_simplesamlphp_auth_as->getAttributes();
  }

  // Do not run this from CLI.
  // Do not run for authorized user.
  // Do not run on admin uli.
  if (php_sapi_name() == 'cli' || $user->uid !== 0 || strpos($_GET['q'], 'user/reset/1') === 0) {
    return;
  }

  // Skipping two-factor-authentication (TFA).
  $skipTfa = variable_get('os2intra_simplesaml_tfa_skip');

  // Checking if it's is a ULI request - save it, force TFA skip.
  if (strpos($_GET['q'], 'user/reset/') === 0) {
    $_SESSION['os2intra_simplesaml_user_login_link'] = $_GET['q'];
    $skipTfa = TRUE;
  }

  // Skip TFA, logging in user if one can be found.
  if ($skipTfa) {
    $uid = db_select("os2intra_simplesaml_nemid_pid_mapping", "os2pid")
      ->fields("os2pid", array("uid"))
      ->condition("nemlogin_uid", $_SESSION['nemlogin_uid'])
      ->execute()
      ->fetchField();

    if (!empty($uid)) {
      unset($_SESSION['os2intra_simplesaml_user_login_link']);
      $user = user_load($uid);
      $edit = array();
      user_login_finalize($edit);
      drupal_goto();
    }
  }

  // Only run if SimpleSAML is not enable or user is not authenticated.
  if (!_simplesamlphp_auth_isEnabled(TRUE) || !$_simplesamlphp_auth_as->isAuthenticated()) {
    // Redirect to SimpleSAML.
    if (variable_get('os2intra_simplesaml_simplesaml_enable')) {
      os2intra_simplesaml_redirect_to_simplesaml();
    }

    // Redirect to Nemid Login.
    if (!isset($_SESSION['nemlogin_uid']) && strpos($_GET['q'], 'nemlogin') !== 0) {
      os2intra_simplesaml_redirect_to_nemlogin();
    }
  }
}

/**
 * Redirecting to SimpleSAML.
 */
function os2intra_simplesaml_redirect_to_simplesaml() {
  $simplesaml_redirect = FALSE;
  $redirected_ips = variable_get('os2intra_simplesaml_redirected_ips');
  $remote_ip = ip_address();

  if (empty($redirected_ips)) {
    // No redirect IPs set, then redirect for all IPs.
    $simplesaml_redirect = TRUE;
  } else {
    $custom_ips = explode(',', $redirected_ips);

    // If the client request is from one of the IP's, login using
    // SimpleSAMLphp; otherwise use nemid login.
    //
    // Check performed on parts of the ip address.
    // This makes it possible to add only the beginning of the IP range.
    // F.ex. 192.168 will allow all ip addresses including 192.168 as part
    // of the it.
    foreach ($custom_ips as $custom_ip) {
      if (strpos($remote_ip, $custom_ip) !== FALSE) {
        $simplesaml_redirect = TRUE;
        break;
      }
    }
  }

  if ($simplesaml_redirect && module_exists('simplesamlphp_auth')) {
    $non_redirect_paths = array(
      'saml_login',
      'user/logout',
      'user/login',
      'logout',
    );
    if (!in_array($_GET['q'], $non_redirect_paths)) {
      watchdog('User', '[SimpleSAML redirect  - message] - ip "%ip" .', array('%ip' => ip_address()));
      drupal_goto('saml_login', array('query' => drupal_get_destination()));
    }
  }
}

/**
 * Redirecting to Nemlogin.
 */
function os2intra_simplesaml_redirect_to_nemlogin() {
  // Unsetting session in case it had any nemid errors.
  if (isset($_SESSION['nemid_login'])) {
    unset($_SESSION['nemid_login']);
  }

  // Redirecting only if module exists and path is valid.
  if (module_exists('os2web_nemlogin')) {
    $non_redirect_paths = array(
      'saml_login',
      'user/logout',
      'user/login',
      'logout',
    );

    if (!in_array($_GET['q'], $non_redirect_paths)) {
      if (variable_get('os2web_nemlogin_enable_select_login_page', FALSE)) {
        drupal_goto('nemlogin/select-login');
      }
      else {
        drupal_goto('nemlogin/login');
      }
    }
  }
}

/*
 * Implements hook_user_delete.
 */
function os2intra_simplesaml_user_delete($account) {
  db_delete('os2intra_simplesaml_nemid_pid_mapping')
    ->condition('uid', $account->uid)
    ->execute();
}

function os2intra_simplesaml_logout_method() {
  global $_simplesamlphp_auth_as;
  // Get the simplesamlphp session.
  $basedir = variable_get('simplesamlphp_auth_installdir', '/var/simplesamlphp');
  require_once($basedir . '/lib/_autoload.php');
  if ($_simplesamlphp_auth_as->isAuthenticated()) {
    $url = $_simplesamlphp_auth_as->getLogoutURL();
    header('Location: ' . $url, TRUE, 302);
    drupal_exit($url);
  }
  else {
    drupal_goto('/logout');
  }
}
