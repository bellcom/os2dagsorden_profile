<?php

/**
 * @file
 * Implements install hooks.
 */

/**
 * Implements hook_requirements().
 */
function os2web_esdh_provider_requirements($phase) {
  if ($phase !== 'runtime') {
    return array();
  }
  $t = get_t();
  $plugins = os2web_esdh_provider_ctools_plugin_type();
  $status = $count = count(array_keys($plugins));
  foreach (array_keys($plugins) as $plugin) {
    if (os2web_esdh_provider_has_api($plugin)) {
      $status--;
    }
  }
  if ($status === 0) {
    $value = $t('Fully supported.');
    $severity = REQUIREMENT_OK;
    $desc = $t('All ESDH plugins seems to be working as intended. <a href="admin/config/os2web/esdh_provider">Status</a>');
  }
  elseif ($status < $count) {
    $value = $t('Partial support.');
    $severity = REQUIREMENT_WARNING;
    $desc = $t('Some ESDH plugins not activated! This can lead to not-working or misleading behavior on the site! <a href="admin/config/os2web/esdh_provider">Check status</a>');
  }
  else {
    $value = $t('Not support.');
    $severity = REQUIREMENT_ERROR;
    $desc = $t('No ESDH plugins activated! This can lead to not-working or misleading behavior on the site! <a href="admin/config/os2web/esdh_provider">Check status</a>');
  }

  $requirements['os2web_esdh_provider_plugins'] = array(
    'title' => $t('OS2Web ESDH integration.'),
    'value' => $value,
    'severity' => $severity,
    'description' => $desc,
  );
  $meeting_path = drupal_realpath(variable_get('os2web_meetings_path'));
  $requirements['os2web_esdh_import_dir'] = array(
    'title' => $t('OS2Web ESDH integration.'),
    'value' => $t('Import directories'),
  );
  if (!(is_dir($meeting_path) && is_writable($meeting_path))) {
    $requirements['os2web_esdh_import_dir']['severity'] = REQUIREMENT_ERROR;
    $requirements['os2web_esdh_import_dir']['description'] = t('OS2Web meeting import dir %variable is not exists or not writable', array('%variable' => variable_get('os2web_meetings_path')));
  }
  else {
    $requirements['os2web_esdh_import_dir']['severity'] = REQUIREMENT_OK;
    $requirements['os2web_esdh_import_dir']['value'] = t('OS2Web meeting import dir is exists and writable');

  }
  return $requirements;
}

/**
 * Creates the db table.
 */
function os2web_esdh_provider_update_7001() {
  $schema = os2web_esdh_provider_schema();
  $table = $schema['os2web_esdh_provider_import'];
  db_create_table('os2web_esdh_provider_import', $table);
}

/**
 * Drops the existing db table.
 *
 * And creates a new one (table has been completely remade.
 */
function os2web_esdh_provider_update_7002() {
  $schema = os2web_esdh_provider_schema();
  $table = $schema['os2web_esdh_provider_import'];
  db_drop_table('os2web_esdh_provider_import');
  db_create_table('os2web_esdh_provider_import', $table);
}

/**
 * Implements hook_schema().
 */
function os2web_esdh_provider_schema() {
  $schema['os2web_esdh_provider_import'] = array(
    'description' => 'ESDH Provider Import Queue.',
    'fields' => array(
      'nid' => array(
        'description' => 'Node id',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'import_status' => array(
        'description' => 'Status of the import',
        'type' => 'varchar',
        'length' => 255,
      ),
      'meeting_xml' => array(
        'description' => 'Manifest filename',
        'type' => 'varchar',
        'length' => 255,
      ),
      'meeting_xmlid' => array(
        'description' => 'ID of meeting XML',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'meeting_name' => array(
        'description' => 'Name of meeting',
        'type' => 'varchar',
        'length' => 255,
      ),
      'meeting_sysid' => array(
        'description' => 'SYSID of meeting',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'meeting_xml_changed' => array(
        'description' => 'Timestamp of when meeting XML was last changed',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'agenda_sysid' => array(
        'description' => 'SYSID of agenda',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'agenda_xml' => array(
        'description' => 'Agenda filename',
        'type' => 'varchar',
        'length' => 255,
      ),
      'agenda_xmlid' => array(
        'description' => 'ID of agenda XML',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'agenda_access' => array(
        'description' => 'Access to agenda',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'agenda_publish' => array(
        'description' => 'Publish status of agenda',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'agenda_type' => array(
        'description' => 'Type of agenda',
        'type' => 'varchar',
        'length' => 255,
      ),
      'agenda_xml_changed' => array(
        'description' => 'Timestamp of when agenda XML was last changed',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'agenda_discovered' => array(
        'description' => 'Timestamp of when agenda XML was first discovered on server',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'agenda_processed' => array(
        'description' => 'Timestamp of when agenda XML was finished processing on server',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'committeed_id' => array(
        'description' => 'ID of the committee',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'committeed_tid' => array(
        'description' => 'TID of the committee term',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'plugin_id' => array(
        'description' => 'ID of the plugin',
        'type' => 'varchar',
        'length' => 100,
      )
    ),
    'primary key' => array('meeting_xmlid', 'agenda_sysid'),
  );
  return $schema;
}

/**
 * Implements hook_update_N().
 *
 * Adds agenda_discovered, agenda_processed columns.
 */
function os2web_esdh_provider_update_7101() {
  // Column agenda_discovered.
  $spec = array(
    'description' => 'Timestamp of when agenda XML was first discovered on server',
    'type' => 'int',
    'unsigned' => TRUE,
  );
  db_add_field('os2web_esdh_provider_import', 'agenda_discovered', $spec);

  // Column agenda_processed.
  $spec = array(
    'description' => 'Timestamp of when agenda XML was finished processing on server',
    'type' => 'int',
    'unsigned' => TRUE,
  );
  db_add_field('os2web_esdh_provider_import', 'agenda_processed', $spec);

  // Filling the discovered and processed dates.
  $query = db_select('os2web_esdh_provider_import', 'i');
  $query->leftJoin('node', 'n', 'n.nid=i.nid');

  $results = $query
    ->fields('i', array('nid', 'import_status', 'meeting_xmlid'))
    ->fields('n', array('created'))
    ->execute()->fetchAll();

  foreach ($results as $result) {
    if ($result->created) {
      $query = db_update('os2web_esdh_provider_import');

      // Updating all, setting discovered.
      $query->fields(array(
        'agenda_discovered' => $result->created,
      ));
      $query->condition('meeting_xmlid', $result->meeting_xmlid, '=');
      $query->execute();

      // Updating imported only, setting processed.
      if (strcmp($result->import_status, 'Imported') === 0) {
        $query = db_update('os2web_esdh_provider_import');
        $query->fields(array(
          'agenda_processed' => $result->created,
        ))
          ->condition('nid', $result->nid, '=');
        $query->execute();
      }
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Change meeting date to UTC.
 */
function os2web_esdh_provider_update_7102() {
  if (date_default_timezone() == 'UTC') {
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'os2web_meetings_meeting');

    $result = $query->execute();
    $meetings = node_load_multiple(array_keys($result['node']));

    foreach($meetings as $meeting){
      // Creating meeting shadow to speed up saving.
      $node = new stdClass();
      $node->nid = $meeting->nid; // Enter the nid taken. Make sure it exists.
      $node->type = 'os2web_meetings_meeting';

      // Start date.
      $date_start = $meeting->field_os2web_meetings_date[LANGUAGE_NONE][0]['value'];
      $date_start_obj = date_create($date_start, new DateTimeZone('Europe/Copenhagen'));
      date_timezone_set($date_start_obj, timezone_open('UTC'));
      // Setting updated start date to shadow node.
      $node->field_os2web_meetings_date[LANGUAGE_NONE][0]['value'] = date_format($date_start_obj, 'Y-m-d H:i');;

      // End date date.
      $date_end = $meeting->field_os2web_meetings_date[LANGUAGE_NONE][0]['value2'];
      $date_end_obj = date_create($date_end, new DateTimeZone('Europe/Copenhagen'));
      date_timezone_set($date_end_obj, timezone_open('UTC'));
      // Setting updated end date to shadow node.
      $node->field_os2web_meetings_date[LANGUAGE_NONE][0]['value2'] = date_format($date_end_obj, 'Y-m-d H:i');

      // Forcing fields updates.
      field_attach_update('node', $node);
      field_attach_presave('node', $node);
      // Clear the static loading cache.
      entity_get_controller('node')->resetCache(array($node->nid));
    }

    return 'All meetings date have been converted from Europe/Copenhagen to UTC timezone. Do not forget to change your timezone to Europe/Copenhagen setting at: /admin/config/regional/settings !';
  } else {
    return 'The currently used timezone is not UTC. This hook is therefore skipped.';
  }
}

/**
 * Adding plugin_id column to os2web_esdh_provider_import.
 */
function os2web_esdh_provider_update_7103() {
  // Adding plugin_id field.
  $spec = array(
    'type' => 'varchar',
    'description' => 'ID of the plugin',
    'length' => 100,
  );
  db_add_field('os2web_esdh_provider_import', 'plugin_id', $spec);

  $meetings = os2web_esdh_provider_invoke('mm', 'get_import_list');

  foreach ($meetings as $meeting) {
    $meeting_xmlid = $meeting['id'];
    $plugin_id = $meeting['plugin_id'];

    db_update('os2web_esdh_provider_import')
      ->fields(array(
        'plugin_id' => $plugin_id,
      ))
      ->condition('meeting_xmlid', $meeting_xmlid, '=')
      ->execute();
  }
}
