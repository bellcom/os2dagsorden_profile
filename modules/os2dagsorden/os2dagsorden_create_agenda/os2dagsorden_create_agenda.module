<?php

/**
 * @file
 * Os2dagsorden_create_agenda.
 *
 * PHP version 5
 *
 * @category OS2Dagsorden
 * @package Os2dagsorden_Create_Agenda
 * @author Stanislav Kutasevits <stan@bellcom.dk>
 * @license http://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
 * @link http://bellcom.dk
 */

require drupal_get_path('module', 'os2dagsorden_create_agenda') . '/includes/os2dagsorden_create_agenda_meeting.inc';
require drupal_get_path('module', 'os2dagsorden_create_agenda') . '/includes/os2dagsorden_create_agenga_meeting_simple.inc';
require drupal_get_path('module', 'os2dagsorden_create_agenda') . '/includes/os2dagsorden_create_agenda_meeting_form.inc';
require drupal_get_path('module', 'os2dagsorden_create_agenda') . '/includes/os2dagsorden_create_agenda_bullet_point.inc';
require drupal_get_path('module', 'os2dagsorden_create_agenda') . '/includes/os2dagsorden_create_agenda_bpa.inc';

/**
 * Implements hook_menu().
 */
function os2dagsorden_create_agenda_menu() {
  $items = array();
  $items['agenda/meeting'] = array(
    'page callback' => 'os2dagsorden_create_agenda_meeting_page',
    'access arguments' => array('administer os2web'),
    'type' => MENU_CALLBACK,
  );

  $items['agenda/meeting/%'] = array(
    'page callback' => 'os2dagsorden_create_agenda_meeting_page',
    'access callback' => '_os2dagsorden_create_agenda_meeting_access',
    'access arguments' => array(2),
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items['node/%/agenda'] = array(
    'page callback' => '_os2dagsorden_create_agenda_redirect',
    'access callback' => '_os2dagsorden_create_agenda_meeting_access',
    'access arguments' => array(1),
    'page arguments' => array(1),
    'title' => 'Edit agenda',
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%/agenda_simple'] = array(
    'page callback' => '_os2dagsorden_create_agenda_simple_redirect',
    'access callback' => '_os2dagsorden_create_agenda_meeting_access',
    'access arguments' => array(1),
    'page arguments' => array(1),
    'title' => 'Edit agenda simple',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/os2dagsorden/create_agenda'] = array(
    'title' => 'OS2dagsorden Manually create full agenda',
    'description' => 'Module that supports manual agenda creation',
    'page callback' => '_os2dagsorden_create_agenda_redirect',
    'access arguments' => array('administer os2web'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/os2dagsorden/create_agenda_simple'] = array(
    'title' => 'OS2dagsorden Manually create simple agenda',
    'description' => 'Module that supports manual agenda creation',
    'page callback' => '_os2dagsorden_create_agenda_simple_redirect',
    'access arguments' => array('administer os2web'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['agenda/%/clear'] = array(
    'page callback' => 'drupal_get_form',
    'access callback' => '_os2dagsorden_create_agenda_meeting_access',
    'access arguments' => array(1),
    'page arguments' => array('os2dagsorden_create_agenda_meeting_content_deletion', 1),
    'title' => 'Anonymize agenda',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Helper function, allows the menu hooks to be redirected to the correct links.
 *
 * @param int $meeting_id
 *   ID of the meeting_id.
 */
function _os2dagsorden_create_agenda_redirect($meeting_id = NULL) {
  if (!$meeting_id) {
    drupal_goto('agenda/meeting');
  }
  else {
    drupal_goto('agenda/meeting/' . $meeting_id);
  }
}

/**
 * Helper function, allows the menu hooks to be redirected to the correct links.
 *
 * @param int $meeting_id
 *   ID of the meeting_id.
 */
function _os2dagsorden_create_agenda_simple_redirect($meeting_id = NULL) {
  if (!$meeting_id) {
    drupal_goto('agenda/meeting', array('query' => array('simple' => '1')));
  }
  else {
    drupal_goto('agenda/meeting/' . $meeting_id, array('query' => array('simple' => '1')));
  }
}

/**
 * Access callback. Returns the create meeeting form.
 *
 * @param int $meeting_id
 *   ID of the meeting.
 *
 * @return mixed
 *   The meeting form.
 */
function os2dagsorden_create_agenda_meeting_page($meeting_id = NULL) {
  if ($_GET['simple']) {
    return drupal_get_form('os2dagsorden_create_agenda_meeting_simple', $meeting_id);
  }
  else {
    return drupal_get_form('os2dagsorden_create_agenda_meeting', $meeting_id);
  }
}

/**
 * Access callback. Show tab only on meeting pages, and if user has access.
 *
 * @param int $meeting_id
 *   ID of the meeting.
 *
 * @return bool
 *   TRUE or FALSE.
 */
function _os2dagsorden_create_agenda_meeting_access($meeting_id) {
  $node = node_load($meeting_id);
  if ($node->type != 'os2web_meetings_meeting') {
    return FALSE;
  }
  $committee_tid = $node->field_os2web_meetings_committee['und'][0]['tid'];
  $access_granted = (user_access('administer os2web') && os2dagsorden_create_agenda_check_user_can_create_meeting_in_commitee($committee_tid));
  return $access_granted;
}

/**
 * Checks is current user can create meeting in given committee.
 *
 * @param int $committee_tid
 *   The committee ID.
 *
 * @return bool
 *   True of false.
 */
function os2dagsorden_create_agenda_check_user_can_create_meeting_in_commitee($committee_tid) {
  if (os2dagsorden_access_helper_check_external_commitee($committee_tid) === TRUE) {
    if (!os2dagsorden_create_agenda_check_user_commitee_admin($committee_tid)) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Checks is current user can clear meeting content.
 *
 * @param int $committee_tid
 *   The committee ID.
 *
 * @return bool
 *   True of false.
 */
function os2dagsorden_create_agenda_check_user_can_delete_meeting_content($committee_tid) {
  if (os2dagsorden_access_helper_check_external_commitee($committee_tid) === TRUE) {
    if (os2dagsorden_create_agenda_check_user_commitee_admin($committee_tid)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_form().
 */
function os2dagsorden_create_agenda_meeting_content_deletion($form, &$form_state, $meeting_id) {
  $meeting = node_load($meeting_id);
  $msg = t('<p>Are you sure that you want clear content of meeting %meeting</p>', array('%meeting' => $meeting->title));
  $msg .= t('<p>Denne handling kan ikke fortrydes.</p>');
  $form_state['meeting_id'] = $meeting_id;
  return confirm_form($form, 'Anonymize meeting' . $meeting->title, "meeting/" . $meeting_id, $msg, t('Anonymize'), t('Cancel'));
}

/**
 * Implements hook_FORM_submit().
 */
function os2dagsorden_create_agenda_meeting_content_deletion_submit($form, &$form_state) {
  $meeting = node_load($form_state['meeting_id']);
  $bullet_points = field_get_items('node', $meeting, 'field_os2web_meetings_bullets');
  foreach ($bullet_points as $bullet_point) {
    os2dagsorden_create_agenda_remove_bullet_point_from_meeting($meeting->nid, $bullet_point['target_id']);
    node_delete($bullet_point['target_id']);
  }
  drupal_goto('meeting/' . $meeting->nid);
}
