<?php

/**
 * @file
 * Number of files to handle at once.
 */

define('OS2DAGSORDEN_PDF2PNG_CONVERSION_DEFAULT_CONVERSION_LIMIT', 100);

/**
 * Runs through all the files.
 *
 * Respecting the batch limit
 * OS2DAGSORDEN_PDF2PNG_CONVERSION_DEFAULT_CONVERSION_LIMIT and calls the conversion
 * function on them.
 *
 * Later on calls the file_save function to update file entity metadata (size
 * etc).
 */
function os2dagsorden_pdf2png_conversion_convert() {
  // Select files for conversion.
  $query = db_select('os2dagsorden_pdf2png_conversion_files', 'f');
  $query->fields('f', array('fid', 'uri'))
    ->isNull('f.status')
    ->range(0, OS2DAGSORDEN_PDF2PNG_CONVERSION_DEFAULT_CONVERSION_LIMIT);
  $result = $query->execute();

  while ($record = $result->fetchAssoc()) {
    os2dagsorden_pdf2png_conversion_convert_single($record['fid'], $record['uri']);
  }
}

/**
 * Does the actual conversion of a single file into PNG.
 *
 * Internally calls Sedja Console shell command to do the job.
 *
 * If the file is not found, the information about it is removed.
 *
 * After the job if run status is updated to Converted/Not converted depending
 * on the result.
 *
 * @param int $fid
 *   The ID of the file.
 * @param string $uri
 *   The file URI.
 */
function os2dagsorden_pdf2png_conversion_convert_single($fid, $uri) {
  // Deleting entry if the file does not exist.
  if (!file_exists($uri)) {
    db_delete('os2dagsorden_pdf2png_conversion_files')
      ->condition('fid', $fid)
      ->execute();
    return;
  }

  // With file name.
  $file_path_real = drupal_realpath($uri);
  $file_realpath_pathinfo = pathinfo($file_path_real);
  $image_dir_realpath = $file_realpath_pathinfo['dirname'] . '/' . $file_realpath_pathinfo['filename'] . '_images/';
  if (!mkdir($image_dir_realpath)) {
    watchdog('PDF2PNG Conversion', 'Could not create subdirectory %dir. Check the permissions', array('%dir' => $image_dir_realpath), WATCHDOG_ERROR);
  }
  // One has to know the exact locale of the system, otherwise uncomment the
  // lines.
  setlocale(LC_CTYPE, "en_DK.UTF-8");
  $shell_file_path_real = escapeshellarg($file_path_real);
  $shell_file_path_converted = escapeshellarg($image_dir_realpath);
  shell_exec(variable_get('os2dagsorden_pdf2png_conversion_sedja_console_path', '') . ' pdftopng -j overwrite -p [CURRENTPAGE] -r 32 -f ' . $shell_file_path_real . ' -o ' . $shell_file_path_converted . ' 2>&1');

  // Successful conversion?
  if (count(file_scan_directory($image_dir_realpath, '/.*.png$/i'))) {
    $image_dir_uri = pathinfo($uri, PATHINFO_DIRNAME) . '/' . $file_realpath_pathinfo['filename'] . '_images';
    db_update('os2dagsorden_pdf2png_conversion_files')
      ->fields(array(
        'png_files_folder' => $image_dir_uri,
        'status' => 'Converted',
      ))
      ->condition('fid', $fid)
      ->execute();
  }
  else {
    db_update('os2dagsorden_pdf2png_conversion_files')
      ->fields(array(
        'status' => 'Not converted',
      ))
      ->condition('fid', $fid)
      ->execute();
  }
}

/**
 * Schedules the future convertion.
 *
 * @param int $fid
 *   File id.
 */
function os2dagsorden_pdf2png_conversion_schedule($fid) {
  $file = file_load($fid);
  try {
    db_insert('os2dagsorden_pdf2png_conversion_files')
      ->fields(array(
        'fid' => $file->fid,
        'uri' => $file->uri,
        'png_files_folder' => NULL,
        'status' => NULL,
      ))
      ->execute();
  }
  catch (Exception $e) {
    watchdog('PDF2PNG Conversion',
      'Cannot schedule a file: fid: %fid, e: %e',
      array(
        '%fid' => $fid,
        '%e' => $e->getMessage(),
      ),
      WATCHDOG_ERROR);
  }
}

/**
 * Schedules the future PNG convertion for bullet point attachments files.
 *
 * @param int $fid
 *   File id.
 */
function os2dagsorden_pdf2png_conversion_schedule_if_bpa($fid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->fieldCondition('field_os2web_meetings_bpa_file', 'fid', $fid, '=');
  $res = $query->execute();
  if (!empty($res['node'])) {
    os2dagsorden_pdf2png_conversion_schedule($fid);
  }
}

/**
 * Implements hook_file_download().
 *
 * @param string $uri
 *   The URI of the file.
 */
function os2dagsorden_pdf2png_conversion_file_download($uri) {
  $folder_uri = pathinfo($uri, PATHINFO_DIRNAME);
  $result = db_select('os2dagsorden_pdf2png_conversion_files', 'o')
    ->fields('o', array('fid'))
    ->condition('png_files_folder', $folder_uri)
    ->execute()
    ->fetchField();
  if (isset($result) && !empty($result)) {
    $info = image_get_info($uri);
    return array(
      'Content-Type' => $info['mime_type'],
    );
  }
}

/**
 * Helper function that return URI to image folder.
 *
 * @param int $pdf_file_uri
 *   The ID of the file.
 *
 * @return mixed
 *   URL to image folder, FALSE if folder is not found.
 */
function os2dagsorden_pdf2png_conversion_get_image_folder_uri($pdf_file_uri) {
  $result = db_select('os2dagsorden_pdf2png_conversion_files', 'o')
    ->fields('o', array('png_files_folder'))
    ->condition('uri', $pdf_file_uri)
    ->condition('status', 'Converted')
    ->execute()
    ->fetchField();
  return $result;
}

/**
 * Implements hook_file_delete().
 *
 * Removes entry from database table.
 */
function os2dagsorden_pdf2png_conversion_file_delete($file) {
  if ($uri = os2dagsorden_pdf2png_conversion_get_image_folder_uri($file->uri)) {
    file_unmanaged_delete_recursive($uri);
    // Updating database entry.
    db_delete('os2dagsorden_pdf2png_conversion_files')
      ->condition('fid', $file->fid)
      ->execute();
  }
}
