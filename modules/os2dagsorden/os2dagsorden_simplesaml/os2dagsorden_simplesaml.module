<?php

/**
 * @file
 * OS2Dagsorden_simplesaml.
 */

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function os2dagsorden_simplesaml_form_simplesamlphp_auth_settings_alter(&$form, &$form_state, $form_id) {
  $form['os2dagsorden_simplesaml_fs'] = [
    '#title' => t('OS2Dagsorden permissions mapping from SimpleSAML'),
    '#description' => t('Leave mapping field empty to disable SimpleSAML permissions sync. When permissions is disabled no new permissions will be added, permissions added manually will not be overridden.'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
  ];
  $form['os2dagsorden_simplesaml_fs']['os2dagsorden_simplesaml_sync_enabled'] = [
    '#title' => t('Enable SimpleSAML permissions sync'),
    '#type' => 'checkbox',
    '#description' => t('You can disable individual permission syncing by leaving the corresponding field empty.'),
    '#default_value' => variable_get('os2dagsorden_simplesaml_sync_enabled'),
  ];
  $form['os2dagsorden_simplesaml_fs']['os2dagsorden_simplesaml_group_attribute'] = [
    '#title' => t('Group attribute name'),
    '#type' => 'textfield',
    '#description' => t('Name of the attribute that is used for fetching user groups.<br/>E.g. http://schemas.xmlsoap.org/claims/Group'),
    '#default_value' => variable_get('os2dagsorden_simplesaml_group_attribute'),
  ];
  $form['os2dagsorden_simplesaml_fs']['os2dagsorden_simplesaml_user_com_mapping'] = [
    '#title' => t('Member of committee permissions group mapping'),
    '#type' => 'textfield',
    '#description' => t('SimpleSAML Group mask that would indicate Member of committee mapping<br/>E.g. <i>OS2dagsorden_<b>[committee]</b>_medlem</i>, use <i><b>[committee]</b></i> as token'),
    '#default_value' => variable_get('os2dagsorden_simplesaml_user_com_mapping'),
  ];
  $form['os2dagsorden_simplesaml_fs']['os2dagsorden_simplesaml_follows_com_pp_mapping'] = [
    '#title' => t('Follows++ committee permissions group mapping'),
    '#type' => 'textfield',
    '#description' => t('SimpleSAML Group mask that would indicate Follows++ committee mapping<br/>E.g. <i>OS2dagsorden_<b>[committee]</b>_person</i>, use <i><b>[committee]</b></i> as token'),
    '#default_value' => variable_get('os2dagsorden_simplesaml_follows_com_pp_mapping'),
  ];
  $form['os2dagsorden_simplesaml_fs']['os2dagsorden_simplesaml_follows_com_plus_mapping'] = [
    '#title' => t('Follows+ committee permissions group mapping'),
    '#type' => 'textfield',
    '#description' => t('SimpleSAML Group mask that would indicate Follows+ committee mapping<br/>E.g. <i>OS2dagsorden_<b>[committee]</b>_lukket</i>, use <i><b>[committee]</b></i> as token'),
    '#default_value' => variable_get('os2dagsorden_simplesaml_follows_com_plus_mapping'),
  ];
  $form['os2dagsorden_simplesaml_fs']['os2dagsorden_simplesaml_follows_com_mapping'] = [
    '#title' => t('Follows committee permissions group mapping'),
    '#type' => 'textfield',
    '#description' => t('SimpleSAML Group mask that would indicate Follows committee mapping<br/>E.g. <i>OS2dagsorden_<b>[committee]</b>_aaben</i>, use <i><b>[committee]</b></i> as token'),
    '#default_value' => variable_get('os2dagsorden_simplesaml_follows_com_mapping'),
  ];


}

/**
 * Implements hook_user_login().
 */
function os2dagsorden_simplesaml_user_login(&$edit, $account) {
  // Don't do anything if the sync is not enabled.
  if (!variable_get('os2dagsorden_simplesaml_sync_enabled')) {
    return;
  }

  // Don't do anything if the simplesaml auth is not present.
  if (!simplesamlphp_auth_is_authenticated()) {
    return;
  }

  // Loading user object for correct saving of user info.
  $user = user_load($account->uid);
  $user_is_updated = FALSE;

  // Collecting user member of committees.
  $user_member_of = [];
  $user_com_mapping_regex = NULL;
  if ($user_com_mapping = variable_get('os2dagsorden_simplesaml_user_com_mapping')) {
    $field_user_committee = field_get_items('user', $user, 'field_user_committee');

    if (!empty($field_user_committee)) {
      $user_member_of = array_column($field_user_committee, 'tid','tid');
    }

    // Preparing regex.
    // if $user_com_mapping = 'OS2dagsorden_[committee]_medlem', then prepared
    // regex will be '/OS2Dagsorden_(.*)_medlem/i'.
    $user_com_mapping_regex = '/' . str_replace('[committee]', '(.*)', $user_com_mapping) . '/i';
  }

  // Collecting user follows++ committees.
  $user_follows_pp = [];
  $user_follows_pp_mapping_regex = NULL;
  if ($user_follows_pp_mapping = variable_get('os2dagsorden_simplesaml_follows_com_pp_mapping')) {
    $field_follows_committee_pp = field_get_items('user', $user, 'field_follows_committee_pp');

    if (!empty($field_follows_committee_pp)) {
      $user_follows_pp = array_column($field_follows_committee_pp, 'tid','tid');
    }

    // Preparing regex.
    // if $user_com_mapping = 'OS2dagsorden_[committee]_person', then prepared
    // regex will be '/OS2Dagsorden_(.*)_person/i'.
    $user_follows_pp_mapping_regex = '/' . str_replace('[committee]', '(.*)', $user_follows_pp_mapping) . '/i';
  }

  // Collecting user follows+ committees.
  $user_follows_plus = [];
  $user_follows_plus_mapping_regex = NULL;
  if ($user_follows_plus_mapping = variable_get('os2dagsorden_simplesaml_follows_com_plus_mapping')) {
    $field_follows_committee_plus = field_get_items('user', $user, 'field_follows_committee_plus');

    if (!empty($field_follows_committee_plus)) {
      $user_follows_plus = array_column($field_follows_committee_plus, 'tid','tid');
    }

    // Preparing regex.
    // if $user_com_mapping = 'OS2dagsorden_[committee]_lukket', then prepared
    // regex will be '/OS2Dagsorden_(.*)_lukket/i'.
    $user_follows_plus_mapping_regex = '/' . str_replace('[committee]', '(.*)', $user_follows_plus_mapping) . '/i';
  }

  // Collecting user follows committees.
  $user_follows = [];
  $user_follows_mapping_regex = NULL;
  if ($user_follows_mapping = variable_get('os2dagsorden_simplesaml_follows_com_mapping')) {
    $field_follows_committee = field_get_items('user', $user, 'field_follows_committee');

    if (!empty($field_follows_committee)) {
      $user_follows = array_column($field_follows_committee, 'tid','tid');
    }

    // Preparing regex.
    // if $user_com_mapping = 'OS2dagsorden_[committee]_aaben', then prepared
    // regex will be '/OS2Dagsorden_(.*)_aaben/i'.
    $user_follows_mapping_regex = '/' . str_replace('[committee]', '(.*)', $user_follows_mapping) . '/i';
  }

  // Extracting committeed from groups and adding them to updated lists.
  $updated_user_member_of = $updated_user_follows_pp = $updated_user_follows_plus = $updated_user_follows = [];

  $groupsAttribure = variable_get('os2dagsorden_simplesaml_group_attribute');
  $groups = simplesamlphp_auth_get_attributes($groupsAttribure);

  foreach ($groups as $group) {
    if ($user_com_mapping_regex && preg_match($user_com_mapping_regex, $group, $matches)) {
      $committee_ss_name = $matches[1];
      _os2dagsorden_simplesaml_add_committee_to_list($committee_ss_name, $updated_user_member_of);
    }
    elseif ($user_follows_pp_mapping_regex && preg_match($user_follows_pp_mapping_regex, $group, $matches)) {
      $committee_ss_name = $matches[1];
      _os2dagsorden_simplesaml_add_committee_to_list($committee_ss_name, $updated_user_follows_pp);
    }
    elseif ($user_follows_plus_mapping_regex && preg_match($user_follows_plus_mapping_regex, $group, $matches)) {
      $committee_ss_name = $matches[1];
      _os2dagsorden_simplesaml_add_committee_to_list($committee_ss_name, $updated_user_follows_plus);
    }
    elseif ($user_follows_mapping_regex && preg_match($user_follows_mapping_regex, $group, $matches)) {
      $committee_ss_name = $matches[1];
      _os2dagsorden_simplesaml_add_committee_to_list($committee_ss_name, $updated_user_follows);
    }
  }

  // Setting user member of.
  if (!empty($user_com_mapping)) {
    if ($user_member_of != $updated_user_member_of) {
      $user_is_updated = TRUE;
      $user->field_user_committee['und'] = [];

      foreach ($updated_user_member_of as $tid) {
        $user->field_user_committee['und'][]['tid'] = $tid;
      }
    }
  }

  // Setting user follows++.
  if (!empty($user_follows_mapping)) {
    if ($user_follows_pp != $updated_user_follows_pp) {
      $user_is_updated = TRUE;
      $user->field_follows_committee_pp['und'] = [];

      foreach ($updated_user_follows_pp as $tid) {
        $user->field_follows_committee_pp['und'][]['tid'] = $tid;
      }
    }
  }

  // Setting user follows+.
  if (!empty($user_follows_plus_mapping)) {
    if ($user_follows_plus != $updated_user_follows_plus) {
      $user_is_updated = TRUE;
      $user->field_follows_committee_plus['und'] = [];

      foreach ($updated_user_follows_plus as $tid) {
        $user->field_follows_committee_plus['und'][]['tid'] = $tid;
      }
    }
  }

  // Setting user follows.
  if (!empty($user_follows_mapping)) {
    if ($user_follows != $updated_user_follows) {
      $user_is_updated = TRUE;
      $user->field_follows_committee['und'] = [];

      foreach ($updated_user_follows as $tid) {
        $user->field_follows_committee['und'][]['tid'] = $tid;
      }
    }
  }

  // Saving user only if it has been updated.
  if ($user_is_updated){
    user_save($user);
  }
}

/**
 * Adds committee to a list.
 *
 * Finds committee by a provided SimpleSAML name, and adds it to the list.
 *
 * @param string $committee_ss_name
 *   SimpleSAML name of the committee.
 * @param array $list
 *   The list to which committee needs to be added.
 */
function _os2dagsorden_simplesaml_add_committee_to_list($committee_ss_name, array &$list) {
  $committee = _os2dagsorden_access_helper_get_committee_by_simplesaml_name($committee_ss_name);
  if ($committee) {
    $list[$committee->tid] = $committee->tid;
  }
}

/**
 * Implements hook_term_insert().
 *
 * Prefills SimpleSAML name field.
 */
function os2dagsorden_simplesaml_taxonomy_term_presave($term) {
  if ($term->vocabulary_machine_name === 'os2web_meetings_tax_committee') {
    // Only do that for new terms, tid is NULL.
    if ($term->tid) {
      return;
    }

    if (isset($term->field_os2web_meetings_com_ssname) && empty($term->field_os2web_meetings_com_ssname['und'])) {
      if (module_exists('transliteration')) {
        $ssname = strtolower(transliteration_get($term->name));
      }
      else {
        $ssname = strtolower($term->name);
      }
      $term->field_os2web_meetings_com_ssname['und'][]['value'] = $ssname;
    }
  }
}
