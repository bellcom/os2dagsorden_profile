<?php

/**
 * @file
 * Os2dagsorden_access_helper.
 *
 * PHP version 5
 *
 * @category OS2Dagsorden
 * @package OS2Dagsorden_Access_Helper
 * @author Stanislav Kutasevits <stan@bellcom.dk>
 * @license http://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
 * @link http://bellcom.dk
 */

include_once 'inc/os2dagsorden_access_helper.permissions.inc';
include_once 'inc/os2dagsorden_access_helper.utils.inc';
include_once 'inc/os2dagsorden_access_helper.print.inc';

DEFINE('OS2DAGSORDEN_ACCESS_HELPER_CLOSED_BP_ONLY_TITLE', 1);
DEFINE('OS2DAGSORDEN_ACCESS_HELPER_CLOSED_BP_FULL_ACCESS', 2);
DEFINE('OS2DAGSORDEN_ACCESS_HELPER_CLOSED_BP_TITLE_DESICION', 3);
DEFINE('OS2DAGSORDEN_ACCESS_HELPER_CLOSED_BP_TITLE_SUGGESTED_DESICION', 4);
DEFINE('OS2DAGSORDEN_ACCESS_HELPER_CLOSED_BP_ANONYMOUS_TITLE', 5);
DEFINE('OS2DAGSORDEN_ACCESS_HELPER_CLOSED_BPA_ANONYMOUS_TITLE', 3);

/**
 * Implements hook_menu().
 */
function os2dagsorden_access_helper_menu() {
  $items = array();

  $items['bullet-point/%/speaker-paper/%/print'] = array(
    'title' => 'Print Talepapir',
    'type' => MENU_CALLBACK,
    'page arguments' => array(1, 3),
    'page callback' => 'os2dagsorden_access_helper_print_speaker_paper',
    'access arguments' => array(3, TRUE),
    'access callback' => 'os2dagsorden_access_helper_check_user_can_see_speaker_paper',
    'type' => MENU_CALLBACK,
  );
  $items['meeting/%/speaker-papers/print'] = array(
    'title' => 'Print Talepapirer',
    'type' => MENU_CALLBACK,
    'page callback' => 'os2dagsorden_access_helper_meeting_all_meeting_speaker_papers_view',
    'access arguments' => array('access content'),
    'page arguments' => array(1),
  );

  $items['logout'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'os2dagsorden_access_helper_logout',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Hook to file download.
 *
 * Allows or denies the file download based on user permissions.
 *
 * @param string $uri
 *   Path to the file.
 *
 * @return int
 *   Returns -1 in case or refusal and file headers in case of success.
 */
function os2dagsorden_access_helper_file_download($uri) {
  $uri1 = str_replace('private://', 'private:///', $uri);
  $result = db_query("SELECT f.* FROM {file_managed} f WHERE uri = :uri or uri = :uri1", array(
    'uri' => $uri,
    'uri1' => $uri1,
  ));
  foreach ($result as $file) {
    // Checking if files is Is file associated with meeting.
    $usages = file_usage_list($file);
    if (isset($usages['file']['node'])) {
      $nid = $usages['file']['node'];
      $node = node_load(key($nid));
      $meeting = NULL;
      if ($node->type === 'os2web_meetings_meeting') {
        $meeting = $node;
        $meeting_committee_id = $meeting->field_os2web_meetings_committee['und'][0]['tid'];
        if (!os2dagsorden_access_helper_is_user_has_full_access_to_meeting_content($meeting)) {
          return -1;
        }
        // Related to personal field?
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->fieldCondition('field_os2web_meetings_full_doc_p', 'fid', $file->fid, '=');
        $result = $query->execute();
        if (!isset($result['node'])) {
          // Personal additional agenda?
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'node')
            ->fieldCondition('field_os2web_meetings_add_doc_p', 'fid', $file->fid, '=');
          $result = $query->execute();
        }
        if (!isset($result['node'])) {
          // Full doc with attachments personal?
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'node')
            ->fieldCondition('field_os2web_meetings_att_doc_p', 'fid', $file->fid, '=');
          $result = $query->execute();
        }
        if (isset($result['node'])) {
          $nids = array_keys($result['node']);
          $personal_meeting_id = reset($nids);

          if (os2dagsorden_access_helper_check_user_can_see_personal_agenda($personal_meeting_id)) {
            os2dagsorden_access_helper_download_file_headers($file);
          }
          else {
            return -1;
          }
        }

        // Related to close field?
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->fieldCondition('field_os2web_meetings_full_doc_c', 'fid', $file->fid, '=');
        $result = $query->execute();
        if (!isset($result['node'])) {
          // Closed additional agenda?
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'node')
            ->fieldCondition('field_os2web_meetings_add_doc_c', 'fid', $file->fid, '=');
          $result = $query->execute();
        }
        if (!isset($result['node'])) {
          // Full doc with attachments closed?
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'node')
            ->fieldCondition('field_os2web_meetings_att_doc_c', 'fid', $file->fid, '=');
          $result = $query->execute();
        }
        if (isset($result['node'])) {
          $nids = array_keys($result['node']);
          $closed_meeting_id = reset($nids);

          if (os2dagsorden_access_helper_check_user_can_see_closed_agenda($closed_meeting_id)) {
            os2dagsorden_access_helper_download_file_headers($file);
          }
          else {
            return -1;
          }
        }

        // Not related to close or personal field, do a general check.
        if (node_access('view', $meeting)) {
          return os2dagsorden_access_helper_download_file_headers($file);
        }
        else {
          return -1;
        }
      }
      elseif ($node->type === 'os2web_meetings_bullet_attach') {
        if (os2dagsorden_access_helper_check_user_can_download_bullet_point_attachment_file($file->fid)) {
          return os2dagsorden_access_helper_download_file_headers($file);
        }
        else {
          return -1;
        }
      }
      else {
        // Not related with os2web_meetings_meeting or
        // os2web_meetings_bullet_attach node.
        return os2dagsorden_access_helper_download_file_headers($file);
      }
    }
    else {
      // Not related with any node.
      return os2dagsorden_access_helper_download_file_headers($file);
    }
  }
}

/**
 * Returns the file headers for downloading it as attachment.
 *
 * @param mixed $file
 *   File to return headers for.
 *
 * @return array
 *   Download file headers.
 */
function os2dagsorden_access_helper_download_file_headers($file) {
  return array(
    'Content-Type' => $file->filemime,
    'Content-Length' => $file->filesize,
    'Content-Disposition' => 'attachment; filename*=UTF-8\'\'' . rawurlencode($file->filename),
  );
}

/**
 * Function to make ser logout and set the information message about it.
 *
 * Important! Not a hook.
 */
function os2dagsorden_access_helper_logout() {
  // Destroy the current session, and reset $user to the anonymous user.
  $show_message = TRUE;
  if (strcasecmp($_SESSION['messages']['status'][0], 'You have been logged out due to inactivity.') === 0) {
    $show_message = FALSE;
  }
  if (drupal_session_started()) {
    session_destroy();
  }

  unset($_GET['destination']);
  if ($show_message && !variable_get('os2dagsorden_title_general_hide_logout_message', FALSE)) {
    drupal_set_message("Du har nu logget af OS2dagsorden. Vi anbefaler, at du lukker alle browservinduer.");
  }
  drupal_goto();
}

/**
 * Implements hook_cronapi().
 */
function os2dagsorden_access_helper_cronapi($op, $job = NULL) {
  switch ($op) {
    case 'list':
      return array('os2dagsorden_access_helper_cron' => t('Deletes all the user rights (is member of) if the right has expired'));
  }
}

/**
 * Implements hook_entity_insert().
 */
function os2dagsorden_access_helper_entity_insert($entity, $type) {
  drupal_register_shutdown_function('_os2dagsorden_access_helper_trigger_hook', $entity, $type);
}

/**
 * Implements hook_entity_update().
 */
function os2dagsorden_access_helper_entity_update($entity, $type) {
  drupal_register_shutdown_function('_os2dagsorden_access_helper_trigger_hook', $entity, $type);
}

/**
 * Handler for meeting updates.
 *
 * @param object $entity
 *   Entity.
 * @param string $type
 *   Entity type.
 */
function _os2dagsorden_access_helper_trigger_hook($entity, $type) {
  if ($type === 'node' && $entity->type === 'os2web_meetings_meeting') {
    $meeting = $entity;

    $modules = module_implements('node_save');

    foreach ($modules as $module) {
      $function = $module . '_node_save';
      if (function_exists($function)) {
        $function($meeting);
      }
    }

  }
}

/**
 * Hook to node_presave.
 *
 * The function will delete the connection to the member object, as well as
 * the role object itself.
 *
 * @param object $node
 *   Mixed  meeting node to be saved.
 *
 * @return object
 *   Meeting node.
 */
function os2dagsorden_access_helper_node_save($node) {
  if ($node->status == 1) {
    global $base_url;
    $committee_id = $node->field_os2web_meetings_committee['und'][0]['tid'];
    $cName = taxonomy_term_load($committee_id)->name;
    $mName = check_plain($node->title);
    $date = field_get_items('node', $node, 'field_os2web_meetings_date');
    $mDate = format_date(strtotime($date[0]['value'] . 'UTC'), $type = 'short', '', $date[0]['timezone']);
    $published_item = (strcasecmp($status, OS2WEB_MEETINGS_CONTENT_TYPES_MEETING_DAGSORDEN) === 0) ? 'en dagsorden' : 'et referat';
    $meeting_url = $base_url . '/meeting/' . $node->nid;
    $mLink = $meeting_url;

    $status = $node->field_os2web_meetings_type['und'][0]['value'];
    if (strcasecmp($status, OS2WEB_MEETINGS_CONTENT_TYPES_MEETING_DAGSORDEN) === 0 || strcasecmp($status, OS2WEB_MEETINGS_CONTENT_TYPES_MEETING_REFERAT) === 0) {
      $committee = taxonomy_term_load($committee_id);

      $notification_committees = array_map('strtolower', array_map('trim', explode(',', variable_get('os2dagsorden_send_notification_committee'))));
      $send_notification = FALSE;
      if (in_array(strtolower($committee->name), $notification_committees)) {
        $send_notification = TRUE;
      }
      else {
        if (isset($committee->field_os2web_meetings_com_subid['und'])) {
          foreach ($committee->field_os2web_meetings_com_subid['und'] as $id_raw) {
            if (in_array(intval($id_raw['value']), $notification_committees)) {
              $send_notification = TRUE;
              break;
            }
          }
        }
      }

      $days_since_meeting_date = (time() - strtotime($node->field_os2web_meetings_date['und'][0]['value'])) / 60 / 60 / 24;

      if ($send_notification && $days_since_meeting_date < variable_get('os2dagsorden_send_timespan_of_notification', 10)) {
        // Send the email to involved people.
        $uids = array();

        // Premeeting member of.
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'user')
          ->fieldCondition('field_user_premeeting_committee', 'tid', $committee_id, '=');
        $result = $query->execute();
        if (isset($result['user'])) {
          $uids = array_keys($result['user']);
        }

        // medlem.
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'user')
          ->fieldCondition('field_user_committee', 'tid', $committee_id, '=');
        $result = $query->execute();
        if (isset($result['user'])) {
          $uids = array_merge($uids, array_keys($result['user']));
        }

        // follow++.
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'user')
          ->fieldCondition('field_follows_committee_pp', 'tid', $committee_id, '=');
        $result = $query->execute();
        if (isset($result['user'])) {
          $uids = array_merge($uids, array_keys($result['user']));
        }

        // follow+.
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'user')
          ->fieldCondition('field_follows_committee_plus', 'tid', $committee_id, '=');
        $result = $query->execute();
        if (isset($result['user'])) {
          $uids = array_merge($uids, array_keys($result['user']));
        }

        // Follow.
        if (variable_get('os2dagsorden_follows_committee_send_notification', FALSE)) {
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'user')
            ->fieldCondition('field_follows_committee', 'tid', $committee_id, '=');
          $result = $query->execute();
          if (isset($result['user'])) {
            $uids = array_merge($uids, array_keys($result['user']));
          }
        }
        // Follows subscribe.
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'user')
          ->fieldCondition('field_follows_committee', 'tid', $committee_id, '=')
          ->fieldCondition('field_follows_committee_subsc', 'tid', $committee_id, '=');
        $result = $query->execute();
        if (isset($result['user'])) {
          $uids = array_merge($uids, array_keys($result['user']));
        }

        global $base_url;
        $cName = taxonomy_term_load($committee_id)->name;
        $mName = check_plain($node->title);
        $date = field_get_items('node', $node, 'field_os2web_meetings_date');
        $mDate = format_date(strtotime($date[0]['value'] . 'UTC'), $type = 'short', '', $date[0]['timezone']);
        $published_item = (stripos($status, OS2WEB_MEETINGS_CONTENT_TYPES_MEETING_DAGSORDEN) === 0) ? 'en dagsorden' : 'et referat';
        $meeting_url = $base_url . '/meeting/' . $node->nid;
        $mLink = $meeting_url;

        // Getting subject and body.
        $subject_template = variable_get('os2dagsorden_send_email_subject', '!meeting_type til !committee er publiceret');
        $body_template = variable_get('os2dagsorden_send_email_body', 'Til !user' . PHP_EOL . PHP_EOL .
          'Du abonnerer på !committee.' . PHP_EOL . 'Der er publiceret !meeting_type til !meeting_name !meeting_date.');

        // Removing duplicates.
        $uids = array_unique($uids);

        foreach ($uids as $uid) {
          // Checking is there has been a notification for the same meeting,
          // to the same user, with the same status in the previous hour.
          if (os2dagsorden_access_helper_check_user_can_see_meeting($node, $committee_id, $uid ) === FALSE) {
            continue;
          }
          $query = db_select('os2dagsorden_notification_emails', 'ne');
          $query->fields('ne')
            ->condition('uid', $uid)
            ->condition('meeting_id', $node->field_os2web_meetings_id['und'][0]['value'])
            ->condition('status', strtolower($status))
            ->condition('date', gmdate("Y-m-d H:i:s", strtotime("now - 1 hour")), ">=");
          $result = $query->execute();

          // If result is empty, then send the mail.
          if (!$result->rowCount()) {
            $user = user_load($uid);

            $uName = empty($user->field_user_full_name['und'][0]['value']) ? $user->name : $user->field_user_full_name['und'][0]['value'];

            // Composing search/replace.
            $search = array(
              '!committee',
              '!meeting_name',
              '!meeting_date',
              '!meeting_type',
              '!user',
              '!meeting_link',
              PHP_EOL,
            );
            $replace = array(
              $cName,
              $mName,
              $mDate,
              $published_item,
              $uName,
              $mLink,
              '<br/>',
            );

            // Making replacements.
            $subject = str_replace($search, $replace, $subject_template);
            $subject = ucfirst($subject);
            $body = str_replace($search, $replace, $body_template);
            $body = ucfirst($body);

            $from = variable_get('system_mail');
            $params = array(
              'subject' => $subject,
              'body' => $body,
            );
            drupal_mail('os2dagsorden_access_helper', 'os2dagsorden_notification_email_', $user->mail, language_default(), $params, $from);
            // Setting the database entry about sent email.
            db_insert('os2dagsorden_notification_emails')
              ->fields(array(
                'uid' => $uid,
                'meeting_id' => $node->field_os2web_meetings_id['und'][0]['value'],
                'date' => gmdate("Y-m-d H:i:s", REQUEST_TIME),
                'status' => strtolower($status),
              ))
              ->execute();
          }
        }
      }
    }

    // Send notification for admin
    if (!empty(variable_get('os2dagsorden_meeting_published_admin_notification_emails', ''))) {
      $meeting_published_notification_committees = array_map('strtolower', array_map('trim', explode(',', variable_get('os2dagsorden_meeting_published_admin_notification_committee', FALSE))));
      $meeting_published_send_notification = FALSE;
      if (in_array(strtolower($committee->name), $meeting_published_notification_committees)) {
        $meeting_published_send_notification = TRUE;
      }
      else {
        if (isset($committee->field_os2web_meetings_com_subid['und'])) {
          foreach ($committee->field_os2web_meetings_com_subid['und'] as $id_raw) {
            if (in_array(intval($id_raw['value']), $meeting_published_notification_committees_committees)) {
              $meeting_published_send_notification = TRUE;
              break;
            }
          }
        }
      }
      if ($meeting_published_send_notification) {
        // Composing search/replace.
        $search = array(
          '!committee',
          '!meeting_name',
          '!meeting_date',
          '!meeting_type',
          '!meeting_link',
          PHP_EOL,
        );
        $replace = array(
          $cName,
          $mName,
          $mDate,
          $published_item,
          $mLink,
          '<br/>',
        );
        $subject_template = variable_get('os2dagsorden_meeting_published_admin_notification_subject', '');
        $body_template = variable_get('os2dagsorden_meeting_published_admin_notification_body', '');
        // Making replacements.
        $subject = str_replace($search, $replace, $subject_template);
        $subject = ucfirst($subject);
        $body = str_replace($search, $replace, $body_template);
        $body = ucfirst($body);

        $from = variable_get('system_mail');
        $to = variable_get('os2dagsorden_meeting_published_admin_notification_emails', '');
        $params = array(
          'subject' => $subject,
          'body' => $body,
        );
        drupal_mail('os2dagsorden_access_helper', 'os2dagsorden_meeting_email_', $to, language_default(), $params, $from);
      }
    }
  }
  return $node;
}

/**
 * Hook to node insert.
 *
 * The function checks the committee of the meeting, and if it matched with
 * the selected committeed for Budget in the settings, then this meeting is
 * considered as the right Budget meeting and the custom URL is updated to
 * point to it.
 *
 * @param object $node
 *   Node.
 */
function os2dagsorden_access_helper_node_insert($node) {
  if ($node->type === 'os2web_meetings_meeting') {
    if ($node->field_os2web_meetings_committee['und'][0]['tid'] === variable_get('os2dagsorden_budget_committee', FALSE)) {
      $path['source'] = 'meeting/' . $node->nid;
      $path['alias'] = 'budget';
      path_save($path);
    }
  }
}

/**
 * Implements hook_user_presave().
 */
function os2dagsorden_access_helper_user_presave(&$edit, $account, $category) {
  if ($account->is_new) {
    if ($user_category = variable_get('os2dagsorden_user_default_committee_category')) {
      foreach ($user_category as $key => $value) {
        if ($value) {
          $edit['field_user_com_categ']['und'][] = array('tid' => $value);
        }
      }
    }

    if ($forbidden_committee_categories = variable_get('os2dagsorden_committee_default_forbidden_cat')) {
      foreach ($forbidden_committee_categories as $key => $value) {
        if ($value) {
          $edit['field_user_com_forbid_categ']['und'][] = array('tid' => $value);
        }
      }
    }
  }
}

/**
 * Implements hook_term_insert().
 *
 * Adds a newly created committee category term to each user forbidden
 * categories list.
 */
function os2dagsorden_access_helper_taxonomy_term_insert($term) {
  if ($term->vocabulary_machine_name === 'os2web_meetings_tax_committee_category') {
    $users = entity_load('user');
    foreach ($users as $user) {
      if ($user->uid == 0) {
        continue;
      }

      $user->field_user_com_forbid_categ['und'][]['tid'] = $term->tid;
      user_save($user);
    }
  }
}

/**
 * Hook to hook_node_access.
 *
 * Function checks whether a given user can or cannot edit/read the given
 * speaker paper.
 *
 * @param object $node
 *   Node.
 * @param string $op
 *   Operator.
 * @param object $account
 *   User account.
 *
 * @return string
 *   Node access flag.
 */
function os2dagsorden_access_helper_node_access($node, $op, $account) {
  // If Supervisor, do not allow to edit their own node.
  if ($node->type === 'os2web_meetings_spaper') {
    if ($op === 'update' || $op === 'view') {
      if (os2dagsorden_access_helper_check_user_can_see_speaker_paper($node->nid, variable_get('os2dagsorden_shared_speaker_paper', TRUE))) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
    }
  }
  elseif ($node->type === 'os2web_meetings_meeting') {
    if ($op === 'view' || in_array('administrator++', $account->roles)) {
      if (os2dagsorden_access_helper_check_user_can_see_meeting($node, NULL, $account->uid)) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
    }
  }
  elseif ($node->type === 'os2web_meetings_bullet') {
    if ($op === 'view' || in_array('administrator++', $account->roles)) {
      $meeting = os2dagsorden_access_helper_get_meeting_by_bullet_point($node->nid);
      if (os2dagsorden_access_helper_check_user_can_see_bullet_point($meeting->nid, $node->nid, $account->uid)) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
    }
  }
  elseif ($node->type === 'os2web_meetings_bullet_attach') {
    if ($op === 'view' || in_array('administrator++', $account->roles)) {
      $bullet_point = os2dagsorden_access_helper_get_bullet_point_by_bpa($node->nid);
      $meeting = os2dagsorden_access_helper_get_meeting_by_bullet_point($bullet_point->nid);
      if (os2dagsorden_access_helper_check_user_can_see_bullet_point_attachment($meeting->nid, $bullet_point->nid, $node->nid)) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
    }
  }
}

/**
 * Implements hook_menu_link_alter().
 */
function os2dagsorden_access_helper_menu_link_alter(&$item) {
  $item['options']['alter'] = TRUE;
}

/**
 * Implements hook_mail().
 */
function os2dagsorden_access_helper_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

/**
 * Implements hook_translated_menu_link_alter().
 */
function os2dagsorden_access_helper_translated_menu_link_alter(&$item, $map) {
  global $user;
  if (!empty($item['access'])) {
    // Menu administrators can see all links.
    if (strpos(current_path(), 'admin/structure/menu/manage/' . $item['menu_name']) === 0 && user_access('administer menu')) {
      return;
    }
    if (isset($item['options']['attributes'])) {
      if (isset($item['options']['attributes']['id']) && $item['options']['attributes']['id'] == 'menu-budgetforhandling') {
        $allowed_committees = explode(',', variable_get('os2dagsorden_budgetforhandling_button_committees', FALSE));
        $user_committees = os2dagsorden_access_helper_get_user_member_of_committees();
        if (count(array_intersect($allowed_committees, $user_committees)) === 0) {
          $item['access'] = FALSE;
        }
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function os2dagsorden_access_helper_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'translated_menu_link_alter') {
    // Move menu_item_visibility_translated_menu_link_alter() to the end of the
    // list. This is mainly to deal with menu_token resetting the menu item
    // access back to what is returned by menu_get_item().
    $group = $implementations['os2dagsorden_access_helper'];
    unset($implementations['os2dagsorden_access_helper']);
    $implementations['os2dagsorden_access_helper'] = $group;
  }
}

/**
 *
 */
function _os2dagsorden_access_helper_get_genaral_bullet_point($meeting_id) {
  $existing_bullet_points = array();
  $node = node_load($meeting_id);
  if ($node->field_os2web_meetings_bullets['und']) {
    $existing_bullet_points = $node->field_os2web_meetings_bullets['und'];
  }
  foreach ($existing_bullet_points as $bullet_nid) {
    $bullet = node_load($bullet_nid['target_id']);
    if ((int) $bullet->field_os2web_meetings_bul_gener[LANGUAGE_NONE][0]['value'] === 1) {
      return $bullet;
    }
  }
  return FALSE;
}


/**
 * Checks is current user is committee admin .
 *
 * @param int $committee_tid
 *   The committee ID.
 *
 * @return bool
 *   True of false.
 */
function os2dagsorden_access_helper_is_user_committee_admin($committee_tid, $uid = FALSE) {
  if (!$uid) {
    $user = os2dagsorden_access_helper_get_user();
  }
  else {
    $user = user_load($uid);
  }
  $committee = taxonomy_term_load($committee_tid);
  $committee_admins = field_get_items('taxonomy_term', $committee, 'field_os2web_meetings_com_admin');
  if ($committee_admins) {
    foreach ($committee_admins as $key => $admin) {
      if ($user->uid === $admin['uid']) {
        return TRUE;
      }
    }
  }
  return FALSE;
}



/**
 * Sorting terms alphabetically based on field_os2web_meetings_com_shname.
 *
 * @param mixed $term_list
 *   The list of terms.
 *
 * @return mixed
 *   Sorted array of terms.
 */
function os2dagsorden_access_helper_get_all_committee_user_is_admin($uid) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', 'os2web_meetings_tax_committee')
    ->fieldCondition('field_os2web_meetings_com_admin', 'uid', $uid);
  $results = $query->execute();
  $committees =  array();
  foreach($results['taxonomy_term'] as $tid) {
    $committees[] = $tid->tid;
  }
  return $committees;
}

