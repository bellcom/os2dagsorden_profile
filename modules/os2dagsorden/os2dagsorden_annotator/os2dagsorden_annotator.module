<?php

/**
 * @file
 * Os2dagsorden_annotator.
 *
 * PHP version 5
 *
 * @category OS2Dagsorden
 * @package OS2Dagsorden_Annotator
 * @author Stanislav Kutasevits <stan@bellcom.dk>
 * @license http://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
 * @link http://bellcom.dk
 */

module_load_include('inc', 'os2dagsorden_annotator', '/includes/os2dagsorden_annotator.common');
module_load_include('inc', 'os2dagsorden_annotator', '/includes/os2dagsorden_annotator.send_to_friend');

define('OS2DAGSORDEN_ANNOTATOR_IS_IPAD', (bool) strpos($_SERVER['HTTP_USER_AGENT'], 'iPad'));
define('OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW', (OS2DAGSORDEN_ANNOTATOR_IS_IPAD) ? variable_get('os2dagsorden_attachments_pages_per_view_mobile', 3) : variable_get('os2dagsorden_attachments_pages_per_view_desktop', 5));

/**
 * Implements hook_menu().
 */
function os2dagsorden_annotator_menu() {
  $items = array();

  $items['meeting/%/bullet-point/%/bullet-point-attachment/%'] = array(
    'title' => 'Bilag',
    'type' => MENU_CALLBACK,
    'page callback' => '_os2dagsorden_annotator_view',
    'access arguments' => array(1, 3, 5),
    'access callback' => '_os2dagsorden_annotator_check_permission',
    'page arguments' => array(1, 3, 5),
  );

  $items['meeting/%/bullet-point/%/bullet-point-attachment/%/print'] = array(
    'title' => 'Bilag Print Version',
    'type' => MENU_CALLBACK,
    'page callback' => '_os2dagsorden_annotator_view_print',
    'access arguments' => array(1, 3, 5),
    'access callback' => '_os2dagsorden_annotator_check_permission',
    'page arguments' => array(1, 3, 5),
  );

  $items['meeting/%/bullet-point/%/bullet-point-attachment-raw/%'] = array(
    'title' => 'Bilag',
    'type' => MENU_CALLBACK,
    'page callback' => '_os2dagsorden_annotator_view_raw',
    'access arguments' => array(1, 3, 5),
    'access callback' => '_os2dagsorden_annotator_check_permission',
    'page arguments' => array(1, 3, 5),
  );

  $items['meeting/%/notes'] = array(
    'title' => 'MÃ¸denoter',
    'type' => MENU_CALLBACK,
    'page callback' => '_os2dagsorden_annotator_meeting_all_notes_view',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );

  $items['meeting/%/notes/send_to_friend_form'] = array(
    'title' => 'Send noter til venner',
    'type' => MENU_CALLBACK,
    'page callback' => 'os2dagsorden_annotator_send_notes_to_friend_form',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );

  $items['meeting/%/notes/send_to_friend_service'] = array(
    'title' => 'Send noter til venner',
    'type' => MENU_CALLBACK,
    'page callback' => 'os2dagsorden_annotator_send_notes_to_friend',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );

  $items['annotator/create'] = array(
    'title' => 'Creating note',
    'type' => MENU_CALLBACK,
    'page callback' => '_os2dagsorden_annotator_create',
    'access arguments' => array('access content'),
  );

  $items['annotator/read/%'] = array(
    'title' => 'Reading note',
    'type' => MENU_CALLBACK,
    'page callback' => '_os2dagsorden_annotator_read',
    'access arguments' => array('access content'),
    'page arguments' => array(2),
  );

  $items['annotator/update/%'] = array(
    'title' => 'Updating note',
    'type' => MENU_CALLBACK,
    'page callback' => '_os2dagsorden_annotator_update',
    'access arguments' => array('access content'),
    'page arguments' => array(2),
  );

  $items['annotator/delete/%'] = array(
    'title' => 'Updating note',
    'type' => MENU_CALLBACK,
    'page callback' => '_os2dagsorden_annotator_delete',
    'access arguments' => array('access content'),
    'page arguments' => array(2),
  );

  $items['annotator/search'] = array(
    'title' => 'Creating note',
    'type' => MENU_CALLBACK,
    'page callback' => '_os2dagsorden_annotator_search',
    'access arguments' => array('access content'),
  );

  $items['annotator/update'] = array(
    'title' => 'Creating note',
    'type' => MENU_CALLBACK,
    'page callback' => '_os2dagsorden_annotator_dummy',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implementation create note endpoint.
 *
 * Creates a note, saves it in the database and redirects to the read endpoint
 * in order to update a note with generated ID.
 */
function _os2dagsorden_annotator_create() {
  global $user;

  $note_json = json_decode(file_get_contents('php://input'), TRUE);

  // Saving fields, that fill be used for search.
  $bilag_id = $note_json['bilag_id'];
  $bullet_point_id = $note_json['bullet_point_id'];
  $meeting_id = $note_json['meeting_id'];

  // Filtering on fields - removing those, that are saved separatelly.
  unset($note_json['bilag_id']);
  unset($note_json['bullet_point_id']);
  unset($note_json['meeting_id']);

  $last_ins_id = db_insert('os2dagsorden_annotator_notes')
    ->fields(array(
      'bilag_id' => $bilag_id,
      'bullet_point_id' => $bullet_point_id,
      'meeting_id' => $meeting_id,
      'uid' => $user->uid,
      'note_info' => json_encode($note_json),
    ))
    ->execute();

  // Redirect to read - updating the note ID.
  header("HTTP/1.1 303 See Other");
  header("Location: " . $GLOBALS['base_url'] . '/annotator/read/' . $last_ins_id);
}

/**
 * Implementation read note endpoint.
 *
 * Updates a freshly created note with the generated id.
 */
function _os2dagsorden_annotator_read($id) {
  drupal_add_http_header('Content-Type', 'application/json');

  global $user;

  $result = db_select('os2dagsorden_annotator_notes', 'notes')
    ->fields('notes')
    ->condition('id', $id, '=')
    ->condition('uid', $user->uid, '=')
    ->execute();

  // Print the found note.
  while ($record = $result->fetchAssoc()) {
    $note_arr = json_decode($record['note_info']);

    // Adding missing fields.
    $note_arr->id = $id;
    $note_arr->user = $user->name;
    $note_arr->permissions = array();

    print(json_encode($note_arr));
  }
}

/**
 * Implementation update note endpoint.
 *
 * Updates the content of the note.
 *
 * @param int $id
 *   The note id.
 */
function _os2dagsorden_annotator_update($id) {
  drupal_add_http_header('Content-Type', 'application/json');

  global $user;
  $note_json = json_decode(file_get_contents('php://input'), TRUE);

  // Filtering on fields - removing those, that are saved separatelly.
  unset($note_json['id']);
  unset($note_json['user']);
  unset($note_json['permissions']);
  unset($note_json['bilag_id']);
  unset($note_json['bullet_point_id']);
  unset($note_json['meeting_id']);

  db_update('os2dagsorden_annotator_notes')
    ->fields(array(
      'note_info' => json_encode($note_json),
    ))
    ->condition('id', $id, '=')
    ->execute();

  print(json_encode(array()));
}

/**
 * Implementation delete note endpoint.
 *
 * Deletes the node from the database.
 */
function _os2dagsorden_annotator_delete($id) {
  db_delete('os2dagsorden_annotator_notes')
    ->condition('id', $id)
    ->execute();

  drupal_add_http_header('Content-Type', 'application/json');
  print(json_encode(array()));
}

/**
 * Implementation search notes endpoint.
 *
 * Makes and sql-query to the database with a params taken from $_GET.
 */
function _os2dagsorden_annotator_search() {
  drupal_add_http_header('Content-Type', 'application/json');

  global $user;

  $possible_meetings = os2dagsorden_access_helper_get_meeting_and_tillaegs_meetings($_GET['meeting_id']);
  $main_meeting = os2dagsorden_access_helper_get_main_meeting($_GET['meeting_id']);
  if ($main_meeting) {
    $possible_meetings[] = $main_meeting;
  }

  $meeting_nid_or = db_or();
  foreach ($possible_meetings as $meeting_id) {
    $meeting_nid_or->condition('meeting_id', $meeting_id, '=');
  }
  $result = db_select('os2dagsorden_annotator_notes', 'notes')
    ->fields('notes')
    ->condition('uid', $user->uid, '=')
    ->condition('bilag_id', $_GET['bilag_id'], '=')
    ->condition('bullet_point_id', $_GET['bullet_point_id'], '=')
    ->condition($meeting_nid_or)
    ->execute();

  // Start of json.
  print('
      {
      "total": "' . $result->rowCount() . '",
      "rows": [');

  // Looping through notes, adding them to array.
  $notes = array();
  while ($record = $result->fetchAssoc()) {
    $note_arr = json_decode($record['note_info']);

    // Adding missing fields.
    $note_arr->id = $record['id'];
    $note_arr->user = $user->name;
    $note_arr->permissions = array();

    $notes[] = json_encode($note_arr);
  }

  // Printing each note and adding come, if note is not last one in the list.
  for ($i = 0; $i < count($notes); $i++) {
    print($notes[$i]);
    if ($i < count($notes) - 1) {
      print(',');
    }
  }

  // End of json.
  print(']
	    }');
}

/**
 * Dummy function.
 *
 * Dummy function, in order to make annotate not throw the exception, when
 * using Touch Plugin on Desktop device.
 *
 * For some undiscovered reasons, annotator is making request to
 * /annotator/update url, and throws an error if that url does not exist.
 */
function _os2dagsorden_annotator_dummy() {
  print(json_encode(array()));
}

/**
 * Checks if a user is allowed to access the requested page.
 *
 * @param int $meeting_id
 *   ID of the meeting.
 * @param int $bullet_point_id
 *   ID of the bullet point.
 * @param int $bilag_id
 *   ID of the attachment (bilag)
 *
 * @return bool
 *   TRUE or FALSE
 */
function _os2dagsorden_annotator_check_permission($meeting_id, $bullet_point_id, $bilag_id) {
  return os2dagsorden_access_helper_check_user_can_see_bullet_point_attachment($meeting_id, $bullet_point_id, $bilag_id);
}

/**
 * Serves the attachment with annotating option.
 *
 * @param int $meeting_id
 *   ID of the meeting.
 * @param int $bullet_point_id
 *   ID of the bullet point.
 * @param int $bilag_id
 *   ID of the attachment (bilag)
 *
 * @return string
 *   The html code of the specific attachment with annotating option.
 */
function _os2dagsorden_annotator_view($meeting_id, $bullet_point_id, $bilag_id) {
  $bilag = node_load($bilag_id);

  global $base_url, $base_path, $user;

  $annotatorButtonText = variable_get('os2dagsorden_create_note_text', 'Lav note');
  $annotatorHideText = variable_get('os2dagsorden_create_note_hide_text', FALSE);
  $annotatorUseTitle = variable_get('os2dagsorden_create_note_text_use_title', FALSE);
  drupal_add_js(array(
      'os2dagsorden_annotator' =>
        array(
          'annotator_button_text' => $annotatorButtonText,
          'annotator_hide_text' => $annotatorHideText,
          'annotator_use_title' => $annotatorUseTitle
        )
    ),
    array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'os2dagsorden_annotator') . '/js/os2dagsorden_annotator_secure.js');
  drupal_add_css(drupal_get_path('module', 'os2dagsorden_annotator') . '/lib/annotator-full.min.css');
  drupal_add_css(drupal_get_path('module', 'os2dagsorden_annotator') . '/lib/touch-plugin/annotator.touch.css');

  $html = "";

  // Check mode.
  $mode = (isset($_GET['search_param'])) ? 'search_mode' : 'annotator_mode';

  if ($mode === 'search_mode') {
    drupal_add_js(drupal_get_path('theme', 'os2dagsorden_classic_theme') . '/js/jquery.highlight.js');
    $search_param = $_GET['search_param'];
    drupal_add_js('highlight_wrapper(".node","' . $search_param . '");', 'inline');

    $path_to_annotate = $GLOBALS['base_url'] . '/meeting/' . $meeting_id . '/bullet-point/' . $bullet_point_id . '/bullet-point-attachment/' . $bilag_id;
    $html .= <<<HTML
        <div class="annotator-touch-widget annotator-touch-controls">
          <div class="annotator-touch-widget-inner">
            <a class="annotator-button annotator-add annotator-focus" href="{$path_to_annotate}">Skift til noter</a>
          </div>
        </div>
HTML;
  }
  else {
    drupal_add_js(drupal_get_path('module', 'os2dagsorden_annotator') . '/lib/annotator-full.min.js');
    drupal_add_js(drupal_get_path('module', 'os2dagsorden_annotator') . '/lib/touch-plugin/annotator.touch.min.js');
    drupal_add_js(drupal_get_path('module', 'os2dagsorden_annotator') . '/lib/json2.js');
    drupal_add_js(drupal_get_path('module', 'os2dagsorden_annotator') . '/lib/XPath.js');

    drupal_add_js('add_annotator(' . $meeting_id . ',' . $bullet_point_id . ',' . $bilag_id . ',"#content","' . $base_path . '?q=", true, "' . $user->name . '");', 'inline');

    drupal_add_css(drupal_get_path('module', 'os2dagsorden_annotator') . '/lib/annotator-full.min.css');
    drupal_add_css(drupal_get_path('module', 'os2dagsorden_annotator') . '/lib/touch-plugin/annotator.touch.css');
  }

  // Floating scrollbar.
  drupal_add_js(drupal_get_path('module', 'os2dagsorden_annotator') . '/js/os2dagsorden_annotator_floatingscrollbar.min.js');
  drupal_add_js('annotator_add_floatinscrollbar();', 'inline');

  // Hiding the side pane menu.
  drupal_add_js('annotator_hide_menu();', 'inline');

  // Overriding title for bilag.
  drupal_set_title($bilag->title);

  // Help icon.
  $html .= '<div class="node">
		<div class="help-button" id="os2dagsorden_annotator_help_text" aria-label="' . variable_get('os2dagsorden_annotator_help_text', 'Hvis du Ã¸nsker at lave en kommentar til et ord eller et afsnit, sÃ¥ marker blot dette hvorefter du fÃ¥r mulighed for at indtaste kommentaren.') . '"></div>
		<div class="controls-right">';

  // Starting the breadcrumb - common for bilag/not bilag.
  $breadcrumb[] = l(t('Forsiden'), $base_url);
  $breadcrumb[] .= l(t('MÃ¸dedetaljer'), 'meeting/' . $meeting_id);
  $breadcrumb[] .= l(t('Dagsordenspunkt'), 'meeting/' . $meeting_id . '/bullet-point/' . $bullet_point_id);

  // Is an actual bilag.
  if (!empty($bilag->field_os2web_meetings_bpa_file['und'][0]['uri'])) {
    // Finishing breadcrumb.
    $breadcrumb[] .= '<span class="breadcrumb-active">Bilag</span>';
    drupal_set_breadcrumb($breadcrumb);

    // Preparing the pager.
    $pageStart = intval($_GET['page']) + 1;
    $pageEnd = intval($_GET['page']) + OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW;

    // Bilag has converter to HTML version of file, getting the text out of it.
    if (!empty($bilag->field_os2web_meetings_bpa_html['und'][0])) {
      $pageAmount = $bilag->field_os2web_meetings_bpa_pages['und'][0]['value'];
      $file_uri = $bilag->field_os2web_meetings_bpa_html['und'][0]['uri'];
      $body_file = file_get_contents($file_uri);
      if (module_exists("os2dagsorden_pdf2png_conversion") && (int) $pageAmount > 1) {
        $pdf_file_uri = $bilag->field_os2web_meetings_bpa_file['und'][0]['uri'];
        $images_folder = os2dagsorden_pdf2png_conversion_get_image_folder_uri($pdf_file_uri);
        if (file_exists($images_folder)) {
          $current_bilag_url = $GLOBALS['base_url'] . '/meeting/' . $meeting_id . '/bullet-point/' . $bullet_point_id . '/bullet-point-attachment/' . $bilag_id;
          $outline_pager = _os2dagsorden_annotator_get_outline_pager_html($images_folder, $pageStart, $pageEnd, $current_bilag_url);
        }
      }
      $text = os2dagsorden_pdf2htmlex_hide_unused_pages($body_file, $pageStart, $pageEnd);

    }

    // Restricting PDF download.
    if (os2dagsorden_access_helper_check_pdf_download_enabled()) {
      // Creating link for downloading pdf version.
      $download_pdf_link = file_create_url($bilag->field_os2web_meetings_bpa_file['und'][0]['uri']);

      // For example, NAME.PDF.
      $file_name = $bilag->field_os2web_meetings_bpa_file['und'][0]['filename'];
      $extention = strtoupper(pathinfo($file_name, PATHINFO_EXTENSION));
      // Is excel file.
      if (stripos($extention, 'xls') || stripos($extention, 'xls') === 0) {
        $extention = 'EXCEL';
      }

      $html .= '<input class="form-submit" type="button" onclick="window.open(\'' . $download_pdf_link . '\')" value="Hent ' . $extention . '-version">';

      // Composing the print link.
      $print_link = $GLOBALS['base_url'] . '/print/meeting/' . $meeting_id . '/bullet-point/' . $bullet_point_id . '/bullet-point-attachment/' . $bilag_id . '/print';
      $html .=
        '<input class="form-submit next-control print-button" type="button" onclick="window.open(\'' . $print_link . '\')" value="Print noter">';
    }

    // Composing html output.
    $html .= '</div><div class="clearfix"></div>' .
      _os2dagsorden_annotator_get_pager_html($meeting_id, $bullet_point_id, $bilag_id, $pageAmount);
    if ($outline_pager) {
      $html .= '<div class = "annotator-outline-pager">' . $outline_pager . '</div><div id="content" class = "has-outline-pager">';
    }
    else {
      $html .= '<div id="content">';
    }
    $html .= '<div class="attachment-text">' . $text . '</div></div>' .
      _os2dagsorden_annotator_get_pager_html($meeting_id, $bullet_point_id, $bilag_id, $pageAmount) .
      '</div>' . _os2dagsorden_annotator_get_group_pager_html($pageAmount);
    // Is not an actual bilag.
  }
  else {
    // Finishing breadcrumb.
    if (isset($bilag->title)) {
      $breadcrumb[] .= '<span class="breadcrumb-active">' . $bilag->title . '</span>';
    }
    drupal_set_breadcrumb($breadcrumb);

    // Getting text.
    $text = '<div class="attachment-text attachment_text_full_container">' . $bilag->field_os2web_meetings_bpa_body['und'][0]['value'] . '</div>';

    // Restricting PDF download.
    if (os2dagsorden_access_helper_check_pdf_download_enabled()) {
      // Composing the print link.
      $print_link = $GLOBALS['base_url'] . '/print/meeting/' . $meeting_id . '/bullet-point/' . $bullet_point_id . '/bullet-point-attachment/' . $bilag_id . '/print';

      $html .= '<input class="form-submit print-button" type="button" onclick="window.open(\'' . $print_link . '\')" value="Print">';
    }

    // Composing html output.
    $html .= '</div><div class="clearfix"></div>' .
          '<div class="clearfix" id="content">' . $text . '</div></div>';
  }

  return $html;
}

/**
 * Raw version of the first page.
 *
 * Serves the raw (html) version of the first page of the attachment. Is used to
 * load the attachment AJAX-way.
 *
 * @param int $meeting_id
 *   ID of the meeting.
 * @param int $bullet_point_id
 *   ID of the bullet point.
 * @param int $bilag_id
 *   ID of the attachment (bilag)
 */
function _os2dagsorden_annotator_view_raw($meeting_id, $bullet_point_id, $bilag_id) {
  $bilag = node_load($bilag_id);
  if (strcmp($bilag->type, 'os2web_meetings_bullet_attach') === 0) {
    // Is an actual bilag.
    if (!empty($bilag->field_os2web_meetings_bpa_file['und'][0]['uri'])) {
      if (!empty($bilag->field_os2web_meetings_bpa_html['und'][0])) {
        $file_uri = $bilag->field_os2web_meetings_bpa_html['und'][0]['uri'];
        $body_file = file_get_contents($file_uri);
        $html = os2dagsorden_pdf2htmlex_print_first_page($body_file, $meeting_id, $bullet_point_id, $bilag_id);
      }
      // Is not an actual bilag.
    }
    else {
      // Getting text.
      $html = $bilag->field_os2web_meetings_bpa_body['und'][0]['value'];
    }
  }
  header('Content-Type: text/html; charset=utf-8');
  print '<div class="attachment-text">' . $html . '</div>';
}

/**
 * Renders the html for custom pager for bilag.
 *
 * @param int $meeting_id
 *   ID of the meeting.
 * @param int $bullet_point_id
 *   ID of the bullet point.
 * @param int $bilag_id
 *   ID of the attachment (bilag)
 * @param int $pageLimit
 *   Maximum numbers of pages in this bilag.
 * @param bool $light
 *   Is used in the light mode.
 *
 * @return string
 *   The html code of pager.
 */
function _os2dagsorden_annotator_get_pager_html($meeting_id, $bullet_point_id, $bilag_id, $pageLimit, $light = FALSE) {
  // Value or 0 if not set.
  $page = intval($_GET['page']);

  if (!$light) {
    $current_bilag_url = $GLOBALS['base_url'] . '/meeting/' . $meeting_id . '/bullet-point/' . $bullet_point_id . '/bullet-point-attachment/' . $bilag_id;
  }
  else {
    $current_bilag_url = $GLOBALS['base_url'] . '/meeting/' . $meeting_id . '/bullet-point/' . $bullet_point_id . '/bullet-point-attachment-light/' . $bilag_id;
  }

  if ($page - OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW >= 0) {
    $prev_page_link = $current_bilag_url . '?page=' . ($page - OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW);
  }
  elseif ($page - OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW < 0 && $page > 0) {
    // Go to the first page.
    $prev_page_link = $current_bilag_url;
  }

  if ($page + OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW < $pageLimit) {
    $next_page_link = $current_bilag_url . '?page=' . ($page + OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW);
  }

  $pager = '<div class="item-list clearfix annotator-pager">
		<ul class="pager">';
  if (isset($prev_page_link)) {
    $pager .= '<li class="page-prev">
		    <a rel="nofollow" href="' . $prev_page_link . '">' . variable_get('os2dagsorden_title_general_prev_page', 'Forrige') . '</a>
		  </li>';
  }
  if (isset($next_page_link)) {
    $pager .= '<li class="page-next">
		    <a rel="nofollow" href="' . $next_page_link . '">' . variable_get('os2dagsorden_title_general_next_page', 'NÃ¦ste') . '</a>
		  </li>';
  }
  $pager .= '</ul>
	      </div>';
  return $pager;
}

/**
 * Renders the html for group pager for bilag.
 *
 * @param int $pageLimit
 *   Maximum numbers of pages in this bilag.
 *
 * @return string
 *   The html code of pager.
 */
function _os2dagsorden_annotator_get_group_pager_html($pageLimit) {
  // Value or 0 if not set.
  $page = intval($_GET['page']);
  if (($page - OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW >= 0) ||  ($page + OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW < $pageLimit)) {
    $start_page = $page + 1;
    $end_page = ($page + OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW < $pageLimit) ? $page + OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW : $pageLimit;
    $pager = '<div class="annotator-group-pager">'
        . t('Sider @start - @end af @total',
            array(
              '@start' => $start_page,
              '@end' => $end_page,
              '@total' => $pageLimit
            )
          )
        . '</div>';
  }
  return $pager;
}

/**
 * Serves the print version of attachment with annotating option.
 *
 * @param int $meeting_id
 *   ID of the meeting.
 * @param int $bullet_point_id
 *   ID of the bullet point.
 * @param int $bilag_id
 *   ID of the attachment (bilag).
 *
 * @return string
 *   The html code for print version of the specific attachment with annotating
 *   option.
 */
function _os2dagsorden_annotator_view_print($meeting_id, $bullet_point_id, $bilag_id) {
  $bilag = node_load($bilag_id);
  if (strcmp($bilag->type, 'os2web_meetings_bullet_attach') === 0) {
    // Getting annotations from storage.
    $annotations = os2dagsorden_annotator_get_notes_by_attachment_id($bilag_id);

    // Initiating variabes
    // in a nice print format.
    $annotation_list = '';
    // Used for enumerating.
    $note_nr = 1;

    // Converted bilag.
    if (!empty($bilag->field_os2web_meetings_bpa_file['und'][0]['uri'])) {
      drupal_set_title($bilag->title);
      $header = '<h3>' . $bilag->title . '</h3>';

      $text = $header;

      // Printing annotations one by one in right order.
      while (!empty($annotations)) {
        // Flushing array indexing.
        $annotations = array_values($annotations);

        $first_note_ind = 0;
        for ($i = 1; $i < count($annotations); $i++) {
          $location = _os2dagsorden_compare_xpath($annotations[$i]->ranges[0]->start, $annotations[$first_note_ind]->ranges[0]->start);

          if ($location === -1) {
            $first_note_ind = $i;
          }
          elseif ($location === 0 && $annotations[$i]->ranges[0]->startOffset < $annotations[$first_note_ind]->ranges[0]->startOffset) {
            $first_note_ind = $i;
          }
        }
        $annotation_list .= _os2dagsorden_annotator_append_note($annotations[$first_note_ind], $note_nr, TRUE);
        $note_nr++;

        unset($annotations[$first_note_ind]);
      }
      // Just attachment.
    }
    else {
      drupal_set_title(t('Bilag') . ' - ' . $bilag->title);
      $header = '<h3>Bilag - ' . $bilag->title . '</h3>';
      $text = $header;

      $body = $bilag->field_os2web_meetings_bpa_body['und'][0]['value'];

      // Printing annotations one by one in right order.
      while (!empty($annotations)) {
        // Flushing array indexing.
        $annotations = array_values($annotations);

        $first_note_ind = 0;
        for ($i = 1; $i < count($annotations); $i++) {
          if ($annotations[$i]->ranges[0]->startOffset < $annotations[$first_note_ind]->ranges[0]->startOffset) {
            $first_note_ind = $i;
          }
        }
        $body = _os2dagsorden_annotator_append_index($body, $annotations[$first_note_ind], $note_nr);
        $annotation_list .= _os2dagsorden_annotator_append_note($annotations[$first_note_ind], $note_nr);
        $note_nr++;

        unset($annotations[$first_note_ind]);
      }
      $text .= $body;
      $text .= "<hr/>";
    }
  }
  $text .= $annotation_list;

  return ('<div class="node" id="content">' . $text . '</div>');
}

/**
 * Composes the view of all user's note for this meeting.
 *
 * @param int $meeting_id
 *   ID of the meeting.
 *
 * @return string
 *   The html of the created page.
 */
function _os2dagsorden_annotator_meeting_all_notes_view($meeting_id) {
  global $base_url;

  // Overriding title for bilag.
  $meeting = node_load($meeting_id);
  $meeting_date = date('d-m-Y', strtotime($meeting->field_os2web_meetings_date['und'][0]['value']));
  drupal_set_title(t("MÃ¸denoter: @title den @date", array('@title' => $meeting->title, '@date' => $meeting_date)));

  // Breadcrumb.
  $breadcrumb[] = l(t('Forsiden'), $base_url);
  $breadcrumb[] .= l(t('MÃ¸dedetaljer'), 'meeting/' . $meeting_id);
  $breadcrumb[] .= '<span class="breadcrumb-active">MÃ¸denoter</span>';
  drupal_set_breadcrumb($breadcrumb);

  // Help icon.
  $html = '<div class="node">';
  $html .= '<div id="content" class="view-content">';

  // Print and send to friend.
  $print_link = l(t('Print noter'), "print/meeting/$meeting_id/notes", array('attributes' => array('target' => '_blank', 'class' => array('form-submit'))));
  $send_to_friend_list = l(t('Send til ven'), "meeting/$meeting_id/notes/send_to_friend_form", array('attributes' => array('rel' => 'lightframe', 'class' => array('form-submit'))));

  $html .= '<div class="controls-right no-print">' . $print_link . '</div>';
  $html .= '<div class="controls-right no-print">' . $send_to_friend_list . '</div>';
  $html .= '<div class="clearfix"></div>';

  $html .= _os2dagsorden_annotator_meeting_all_notes_generate_html($meeting_id);

  return $html;
}

/**
 * Generates HTML of meeting notes.
 *
 * @param int $meeting_id
 *   ID of the meeting.
 *
 * @return string
 *   The html of the created page.
 */
function _os2dagsorden_annotator_meeting_all_notes_generate_html($meeting_id) {
  $html = '';

  $potential_meetings = os2dagsorden_access_helper_get_meeting_and_tillaegs_meetings($meeting_id);

  foreach ($potential_meetings as $meeting_id) {
    $meeting = node_load($meeting_id);
    $bullet_points = array();
    if (isset($meeting->field_os2web_meetings_bullets['und'])) {
      // Eliminating duplicates in bullet points.
      foreach ($meeting->field_os2web_meetings_bullets['und'] as $bullet_point) {
        $hash = $bullet_point['target_id'];
        $bullet_points[$hash] = $bullet_point;
      }

      foreach ($bullet_points as $bullet_point) {
        $bullet_point = node_load($bullet_point['target_id']);
        if (isset($bullet_point->field_os2web_meetings_attach['und'])) {
          // Eliminating duplicates in bullet points attachments.
          $attachments = array();
          foreach ($bullet_point->field_os2web_meetings_attach['und'] as $attachment_id) {
            $hash = $attachment_id['target_id'];
            $attachments[$hash] = $attachment_id;
          }
          $annotation_lists = array();
          $non_bilag_note_nr = 1;
          $bilag_note_nr = 1;
          foreach ($attachments as $key => $attachment_id) {
            $bilag = node_load($attachment_id['target_id']);

            // Getting annotations from storage.
            $annotations = os2dagsorden_annotator_get_notes_by_attachment_id($bilag->nid);

            // Used for enumerating.

            while (!empty($annotations)) {
              // Flushing array indexing.
              $annotations = array_values($annotations);

              $first_note_ind = 0;
              for ($i = 1; $i < count($annotations); $i++) {
                if ($annotations[$i]->ranges[0]->startOffset < $annotations[$first_note_ind]->ranges[0]->startOffset) {
                  $first_note_ind = $i;
                }
              }

              if (!empty($bilag->field_os2web_meetings_bpa_file['und'])) {
                $annotation_lists['bilags'] .= _os2dagsorden_annotator_append_note($annotations[$first_note_ind], $bilag_note_nr, TRUE, TRUE,
                '/meeting/' . $meeting_id . '/bullet-point/' . $bullet_point->nid . '/bullet-point-attachment/' . $bilag->nid, $bilag->title);
                $bilag_note_nr++;
              }
              else {
                $annotation_lists['non-bilags'] .= _os2dagsorden_annotator_append_note($annotations[$first_note_ind], $non_bilag_note_nr, TRUE, FALSE,
                '/meeting/' . $meeting_id . '/bullet-point/' . $bullet_point->nid . '/bullet-point-attachment/' . $bilag->nid);
                $non_bilag_note_nr++;
              }
              unset($annotations[$first_note_ind]);
            }
          }

          if (!empty($annotation_lists)) {
            $html .= '<div class="annotator-notes">';
            $html .= '<h1 class="title">' . $bullet_point->title . '</h1>';
            if (!empty($annotation_lists['non-bilags'])) {
              $html .= '<div class="annotator-non-bilags-notes">';
              $html .= '<h3>' . t('Fremstillingsnoter') . '</h3>';
              $html .= $annotation_lists['non-bilags'];
              $html .= '</div>';
            }
            if (!empty($annotation_lists['bilags'])) {
              $html .= '<div class="annotator-bilags-notes">';
              $html .= '<h3>' . t('Bilagsnoter') . '</h3>';
              $html .= $annotation_lists['bilags'];
              $html .= '</div>';
            }
            $html .= '</div>';
          }
        }
      }
    }
  }

  $html .= '</div>';
  $html .= '</div>';

  return $html;
}

/**
 * Compares two xpath.
 *
 * @param string $path1
 *   First xpath.
 * @param string $path2
 *   First xpath.
 *
 * @return int
 *   Return -1 if $path1 is before, 1 if $path1 is after, 0 if equal.
 */
function _os2dagsorden_compare_xpath($path1, $path2) {
  $path1_el = explode('/', $path1);
  $path2_el = explode('/', $path2);

  // Finding the array to start with.
  if (count($path1_el) > count($path2_el)) {
    $start_with = $path1_el;
  }
  else {
    $start_with = $path2_el;
  }

  for ($i = 0; $i < count($start_with); $i++) {
    // If none of them have container index.
    if (!strpos($path1_el[$i], '[') && !strpos($path2_el[$i], '[')) {
      continue;
      // Only second has contained index, means that the first path is before.
    }
    elseif (!strpos($path1_el[$i], '[') && strpos($path2_el[$i], '[')) {
      return -1;
      // Only first has contained index, means that the second path is before.
    }
    elseif (strpos($path1_el[$i], '[') && !strpos($path2_el[$i], '[')) {
      return 1;
      // All the paths have [..].
    }
    else {
      $num1 = substr($path1_el[$i], strpos($path1_el[$i], '[') + 1, strpos($path1_el[$i], ']') - (strpos($path1_el[$i], '[') + 1));
      $num2 = substr($path2_el[$i], strpos($path2_el[$i], '[') + 1, strpos($path2_el[$i], ']') - (strpos($path2_el[$i], '[') + 1));
      if ($num1 > $num2) {
        return 1;
      }
      elseif ($num1 < $num2) {
        return -1;
      }
      else {
        continue;
      }
    }
  }
  // Equal.
  return 0;
}

/**
 * Appends the index.
 *
 * Appends the right index number to a word/set of words,
 * that has a annotation attached.
 *
 * @param string $body
 *   The entire text of the attachment.
 * @param object $note
 *   The note object.
 * @param int $note_nr
 *   The ordinal number of the note.
 *
 * @return string
 *   The modified body text with attached index.
 */
function _os2dagsorden_annotator_append_index($body, $note, $note_nr) {
  $positionStart = strpos($body, $note->quote, $note->ranges['0']->startOffset);
  $positionEnd = $positionStart + strlen($note->quote);
  $body = substr_replace($body, '<sup><b>[' . $note_nr . ']</b></sup>', $positionEnd, 0);

  return $body;
}

/**
 * Composes the line with note ordinal index and the note text.
 *
 * Is used below the attachment text as footnotes.
 *
 * @param object $note
 *   The note object.
 * @param int $index
 *   The ordinal number of the note.
 * @param bool $print_text
 *   Print or not print the annotated text.
 * @param string $link
 *   The link that needs to be associated with the note text.
 *
 * @return string
 *   The footnote with note text.
 */
function _os2dagsorden_annotator_append_note($note, $index, $print_text = FALSE, $is_bilag = FALSE, $link = FALSE, $bilag_title = '') {
  $to_return = '<div class="annotator-note">';
  $to_return .= '<div class="annotator-note-index">' . $index . ').</div> ';
  if (!$print_text) {
    $to_return .= '<div class="annotator-note-text">' . $note->text . '</div>';
  }
  else {
    $xpath = $note->ranges[0]->start;
    $xpath_arr = explode('/', $xpath);
    $page_nr = trim($xpath_arr[2], 'div[]');
    if (!$page_nr) {
      $page_nr = 1;
    }
    $to_return .= '<div class="annotator-note-text">';
    if (!empty($bilag_title) && is_numeric($page_nr)) {
      $to_return .= '<u><b>' . $bilag_title . '</b> Side ' . $page_nr . '</u></br>';
      $to_return .= ' <b>' . $note->quote . '</b>:<br/><i>' . $note->text . '</i>';
    }
    else {
      $to_return .= ' <b><u>' . $note->quote . '</u></b>:<br/><i>' . $note->text . '</i>';
    }

    if (!empty($link)) {
      if (intval($page_nr) > OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW) {
        // If pages per view is 5, then the page number will be 5, 10, 15 etc.
        $link .= '?page=' . intval($page_nr /
            OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW) * OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW;
      }

      global $base_url;
      $to_return .= '<div class="annotator-note-link"><a target="_blank" href="' . $base_url . $link . '" class="no-print">' . t('GÃ¥ til note') . '</a> </div>';

    }
    $to_return .= '</div>';
  }
  $to_return .= '</div>';
  return $to_return;
}

/**
 * Implements hook_node_delete().
 *
 * Deletes the associated notes, when deleting the content.
 */
function os2dagsorden_annotator_node_delete($node) {
  if ($node->type === 'os2web_meetings_meeting') {
    db_delete('os2dagsorden_annotator_notes')
      ->condition('meeting_id', $node->nid, '=')
      ->execute();
  }
  if ($node->type === 'os2web_meetings_bullet') {
    db_delete('os2dagsorden_annotator_notes')
      ->condition('bullet_point_id', $node->nid, '=')
      ->execute();
  }
  if ($node->type === 'os2web_meetings_bullet_attach') {
    db_delete('os2dagsorden_annotator_notes')
      ->condition('bilag_id', $node->nid, '=')
      ->execute();
  }
}

/**
 * Renders the html for outline pager for bilag.
 *
 * @param string $images_folder
 *   URI to folder with image files.
 * @param int $pageStart
 *   First page number.
 * @param int $pageEnd
 *   Last page number.
 * @param string $current_bilag_url
 *   URL to current BPA page.
 *
 * @return string
 *   The html code of outline pager.
 */
function _os2dagsorden_annotator_get_outline_pager_html($images_folder, $pageStart, $pageEnd, $current_bilag_url) {
  $images_folder_realpath = drupal_realpath($images_folder);
  $images = file_scan_directory($images_folder_realpath, '/.*.png$/i', array('key' => 'name'));
  $output = '';

  if (isset($images) && !empty($images)) {
    ksort($images, SORT_NUMERIC);
    $output = '<ul>';
    foreach ($images as $key => $image) {
      if ($key < $pageStart || $key > $pageEnd) {
        $page = floor($key / OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW) * OS2DAGSORDEN_ANNOTATOR_PAGES_PER_VIEW;
        $link = $current_bilag_url . '?page=' . $page . '#pf' . $key;
      }
      else {
        $link = '#pf' . $key;
      }
      $output .= '<li> <a href="' . $link . '"><img src = "' . file_create_url(rawurldecode($images_folder) . '/' . $key . '.png') . '">'
          . '<span class="page-number"> ' . $key . '</span></li>';
    }
    $output .= '</ul>';
  }
  return $output;
}
